(define mona-gui-auto-start #t)

;; (define (mona-gui-enum-windows) (list "GUI Shell" "/APPS"))
;; (define (mona-gui-get-window-title w) w)
;; (define (mona-gui-move-window w x y) w)

;; prompt string
(define (mona-prompt-string)
  (string-append "mona:"
                 (fs-path (fs-current-directory))
                 ">"))

(define (subshell)
  (call-process (string-append "/SERVERS/SCHEME.EX5"  " " "/LIBS/SCHEME/fib.scm")))
;; (define (make-queue)
;;   (cons '() '()))

;; (define (enqueue! queue obj)
;;   (let ((lobj (list obj)))
;;     (if (null? (car queue))
;;     (begin
;;       (set-car! queue lobj)
;;       (set-cdr! queue lobj))
;;     (begin
;;       (set-cdr! (cdr queue) lobj)
;;       (set-cdr! queue lobj)))
;;     (car queue)))

;; (define (dequeue! queue)
;;   (if (pair? (car queue))
;;       (let ((obj (car (car queue))))
;;         (set-car! queue (cdr (car queue)))
;;         obj)
;;       (lambda () 'end)))

;; (define process-queue (make-queue))

;; (define queue (cons '() '()))

;; (define (enqueue! process)
;;   (if (null? (car queue))
;;       (set-car! queue process)
;;       (set-cdr! queue process)))

;; (define (dequeue!)
;;   (let ((p (cdr queue)))
;;     (set-cdr! queue (car queue))
;;     (set-car! queue '())
;;     p))

;; (define (coroutine process)
;;   (enqueue!  process-queue process))

;; (define (start)
;;   (let ((process (dequeue! process-queue)))
;;     (if (null? process)
;;         'end
;;         (process))))

;; (define (pause)
;;   (call/cc (lambda (c)
;;              (coroutine (lambda () (c #f)))
;;              (start))))





(define (squirrel)
  (start-process "/APPS/BAYGUI/MONASQ.EX5"))

(define (bplayer)
  (start-process "/APPS/BAYGUI/BPLAYER.EX5"))

(define (a)
  (start-process "/APPS/AUDIO.EX5"))

(define (h)
  (start-process "/APPS/HELLO.EX5"))



;; (define (w)
;;   (aif it (find (lambda (window) (string=? (mona-gui-get-window-title window) "GUI Shell"))
;;                 (mona-gui-enum-windows))
;;        (mona-gui-move-window it 50 100)
;;        #f))


;; (define (wm1)
;;   (aif it (find (lambda (window) (string=? (mona-gui-get-window-title window) "GUI Shell"))
;;                 (mona-gui-enum-windows))
;;        (let loop ((x 300) (y 300) (count 0))
;;          (cond ((> count 1000) (print 'done))
;;                ((and (< x 300) (= y 10))
;;                 (begin
;;                   (mona-gui-move-window it x y)
;;                   (pause)
;;                   (loop (+ x 10) y (+ 1 count))))
;;                ((and (>= x 300) (<= y 300))
;;                 (begin
;;                   (mona-gui-move-window it x y)
;;                   (pause)
;;                   (loop x (+ 10 y) (+ 1 count))))
;;                ((and (> x 10) (>= y 300))
;;                 (begin
;;                   (mona-gui-move-window it x y)
;;                   (pause)
;;                   (loop (- x 10) y (+ 1 count))))
;;                ((and (= x 10) (> y 10))
;;                 (begin
;;                   (mona-gui-move-window it x y)
;;                   (pause)
;;                   (loop x (- y 10) (+ 1 count)))
;;                (else (loop 300 300 (+ 1 count)))))
;;        #f)))

;; (define (wm2)
;;   (aif it (find (lambda (window) (string=? (mona-gui-get-window-title window) "/APPS"))
;;                 (mona-gui-enum-windows))
;;        (let loop ((x 10) (y 10) (count 0))
;;          (cond ((> count 1000) (print 'done))
;;                ((and (< x 300) (= y 10))
;;                 (begin
;;                   (mona-gui-move-window it x y)
;;                   (pause)
;;                   (loop (+ x 10) y (+ 1 count))))
;;                ((and (>= x 300) (<= y 300))
;;                 (begin
;;                   (mona-gui-move-window it x y)
;;                   (pause)
;;                   (loop x (+ 10 y) (+ 1 count))))
;;                ((and (> x 10) (>= y 300))
;;                 (begin
;;                   (mona-gui-move-window it x y)
;;                   (pause)
;;                   (loop (- x 10) y (+ 1 count))))
;;                ((and (= x 10) (> y 10))
;;                 (begin
;;                   (mona-gui-move-window it x y)
;;                   (pause)
;;                   (loop x (- y 10) (+ 1 count))))
;;                (else (loop 10 10 (+ 1 count)))))
;;        #f))


;; (define queue (cons '() '()))

;; (define (enqueue! process)
;;   (if (null? (car queue))
;;       (set-car! queue process)
;;       (set-cdr! queue process)))

;; (define (dequeue!)
;;   (let ((p (cdr queue)))
;;     (set-cdr! queue (car queue))
;;     (set-car! queue '())
;;     p))

;; (define (coroutine process)
;;   (enqueue! process))

;; (define (start)
;;   (let ((process (dequeue!)))
;;     (if (null? process)
;;         'end
;;         (process))))

;; (define (pause)
;;   (call/cc (lambda (c)
;;              (coroutine (lambda () (c #f)))
;;              (start))))

;; (coroutine wm1)
;; (coroutine wm2)

;; (define queue (cons '() '()))

;; (define (enqueue! process)
;;   (if (null? (car queue))
;;       (set-car! queue process)
;;       (set-cdr! queue process)))

;; (define (dequeue!)
;;   (let ((p (cdr queue)))
;;     (set-cdr! queue (car queue))
;;     (set-car! queue '())
;;     p))

;; (define (coroutine process)
;;   (enqueue! process))

;; (define (start)
;;   (let ((process (dequeue!)))
;;     (if (null? process)
;;         'end
;;         (process))))

;; (define (pause)
;;   (call/cc (lambda (c)
;;              (coroutine (lambda () (c #f)))
;;              (start))))

;; (coroutine (lambda ()
;;                (let loop ((i 0))
;;                  (if (< i 10)
;;                      (begin
;;                        (print i)
;;                        (pause)
;;                        (loop (+ 1 i)))
;;                      #f))))

;; (coroutine (lambda ()
;;                (let loop ((i 10))
;;                  (if (< i 20)
;;                      (begin
;;                        (print i)
;;                        (pause)
;;                        (loop (+ 1 i)))
;;                      #f))))

; 落ちるかどうか検討する。不要になったら消す
(define (t)
  (aif it (find (lambda (window) (string=? (mona-gui-get-window-title window) "GUI Shell"))
                (mona-gui-enum-windows))
       (let loop ((x 300) (y 300))
         (cond ((and (< x 300) (= y 10))
                (begin
                  (mona-gui-move-window it x y)
                  (loop (+ x 10) y)))
               ((and (>= x 300) (<= y 300))
                (begin
                  (mona-gui-move-window it x y)
                  (loop x (+ 10 y))))
               ((and (> x 10) (>= y 300))
                (begin
                  (mona-gui-move-window it x y)
                  (loop (- x 10) y)))
               ((and (= x 10) (> y 10))
                (begin
                  (mona-gui-move-window it x y)
                  (loop x (- y 10))))
               (else (loop 300 300))))
       #f))

(define (x)
  (let loop ((i 0))
    (cond ((= i 9000)
           (print i))
          ((= i 8000)
           (print i))
          ((= i 7000)
           (print i))
          ((= i 6000)
           (print i))
          ((= i 5000)
           (print i))
          ((= i 4000)
           (print i))
          ((= i 3000)
           (print i))
          ((= i 2000)
           (print i))
          ((= i 1000)
           (print i))
          (else #f))
    (loop (+ 1 i))))

(define (asA)
  (start-process "/APPS/AUDIO.EX5"))

(define (tr)
  (start-process "/APPS/TREMOR.EX5"))


(define (ac)
  (call-process "/APPS/ACLI.EX5"))



(define (bp)
  (start-process "/APPS/BAYGUI/BPLAYER.APP/BPLAYER.EX5"))


(define (wget)
  (call-process "/APPS/WGET.EX5 http://10.0.2.2/hello.html"))

(define (z)
  (| "/APPS/WGET.EX5 http://10.0.2.2/" "/apps/upper.ex5"))


(define (movie)
  (call-process "/APPS/BAYGUI/XMONAPEG.EX5 /APPS/BAYGUI/SAMPLE.MPG"))

;(wget)

;(gui)

;(as)
;(load "/SERVERS/TEST/test.scm")

(define (as)
  (start-process "/APPS/AUDIO.EX5"))

(define (as2)
  (start-process "/APPS/AUDIO2.EX5"))

(define (hp)
  (start-process "/MUSIC/HAPPY.EX5 -d /MUSIC"))
