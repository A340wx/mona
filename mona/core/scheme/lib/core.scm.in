(define caar (lambda (p) (car (car p))))
(define cadr (lambda (p) (car (cdr p))))
(define cdar (lambda (p) (cdr (car p))))
(define cddr (lambda (p) (cdr (cdr p))))
(define caaar (lambda (p) (caar (car p))))
(define caadr (lambda (p) (caar (cdr p))))
(define cadar (lambda (p) (cadr (car p))))
(define caddr (lambda (p) (cadr (cdr p))))
(define cdaar (lambda (p) (cdar (car p))))
(define cdadr (lambda (p) (cdar (cdr p))))
(define cddar (lambda (p) (cddr (car p))))
(define cdddr (lambda (p) (cddr (cdr p))))
(define caaaar (lambda (p) (caaar (car p))))
(define caaadr (lambda (p) (caaar (cdr p))))
(define caadar (lambda (p) (caadr (car p))))
(define caaddr (lambda (p) (caadr (cdr p))))
(define cadaar (lambda (p) (cadar (car p))))
(define cadadr (lambda (p) (cadar (cdr p))))
(define caddar (lambda (p) (caddr (car p))))
(define cadddr (lambda (p) (caddr (cdr p))))
(define cdaaar (lambda (p) (cdaar (car p))))
(define cdaadr (lambda (p) (cdaar (cdr p))))
(define cdadar (lambda (p) (cdadr (car p))))
(define cdaddr (lambda (p) (cdadr (cdr p))))
(define cddaar (lambda (p) (cddar (car p))))
(define cddadr (lambda (p) (cddar (cdr p))))
(define cdddar (lambda (p) (cdddr (car p))))
(define cddddr (lambda (p) (cdddr (cdr p))))

(define call/cc call-with-current-continuation)

(define error (lambda x
                (display "error:")
                (for-each (lambda (s) (display s) (display " "))  x)))

(define zero?
  (lambda (x)
    (= 0 x)))

(define even?
  (lambda (x)
    (let ((quotient (/ x 2)))
      (= (- (* quotient 2) x) 0))))

(define odd?
  (lambda (x)
    (not (even? x))))

(define not
  (lambda (condition)
    (if condition #f #t)))

(define null '())

(define null?
  (lambda (x)
    (eqv? x null)))

(define list (lambda args args))

(define-macro case
  (lambda (msg . args)
    (if (null? args)
	'(void)
	(let* ((first (car args))
	       (body (cdr first)))
	  (if (eq? (car first) 'else)
	      (if (null? (cdr body))
		  (car body)
		  `(begin ,@(cdr first)))
	      `(if (member ,msg (quote ,(car first)))
		   ,(if (null? (cdr body))
			(car body)
			`(begin ,@(cdr first)))
		   (case ,msg ,@(cdr args))))))))

(define-syntax list
  (syntax-rules ()
    ((_ a) (cons a null))
    ((_ a b ...) (cons a (list b ...)))))

(define-syntax and
  (syntax-rules ()
    ((and) #t)
    ((and test) test)
    ((and test1 test2 ...)
     (if test1 (and test2 ...) #f))))

(define-syntax or
  (syntax-rules ()
    ((or) #f)
    ((or test) test)
    ((or test1 test2 ...)
     (let ((x test1))
       (if x x (or test2 ...))))))

(define-syntax case
  (syntax-rules (else)
    ((case (key ...)
       clauses ...)
     (let ((atom-key (key ...)))
       (case atom-key clauses ...)))
    ((case key
       (else result1 result2 ...))
     (begin result1 result2 ...))
    ((case key
       ((atoms ...) result1 result2 ...))
     (if (memv key (list atoms ...))
         (begin result1 result2 ...)))
    ((case key
       ((atoms ...) result1 result2 ...)
       clause clauses ...)
     (if (memv key (list atoms ...))
         (begin result1 result2 ...)
         (case key clause clauses ...)))))

(define-syntax cond
  (syntax-rules (else =>)
    ((cond (else result1 result2 ...))
     (begin result1 result2 ...))
    ((cond (test => result))
     (let ((temp test))
       (if temp (result temp))))
    ((cond (test => result) clause1 clause2 ...)
     (let ((temp test))
       (if temp
           (result temp)
           (cond clause1 clause2 ...))))
    ((cond (test)) test)
    ((cond (test) clause1 clause2 ...)
     (let ((temp test))
       (if temp
           temp
           (cond clause1 clause2 ...))))
    ((cond (test result1 result2 ...))
     (if test (begin result1 result2 ...)))
    ((cond (test result1 result2 ...)
           clause1 clause2 ...)
     (if test
         (begin result1 result2 ...)
         (cond clause1 clause2 ...)))))

(define positive? (lambda (x) (> x 0)))
(define negative? (lambda (x) (< x 0)))
(define abs (lambda (x) (if (negative? x) (* -1 x) x)))
(define not (lambda (x) (if x #f #t)))

(define call-with-input-file (lambda (file proc)
                               (let* ((port (open-input-port file)) (ret (proc port)))
                               (close-input-port port)
                               ret)))

(define call-with-output-file (lambda (file proc)
                               (let* ((port (open-output-port file)) (ret (proc port)))
                               (close-output-port port)
                               ret)))

(define with-input-from-file (lambda (file proc)
                               (let* ((default-input-port (current-input-port)) (port (open-input-port file)))
                                 (set-current-input-port! port)
                                 (proc)
                                 (close-input-port port)
                                 (set-current-input-port! default-input-port))))

(define with-output-from-file (lambda (file proc)
                               (let* ((default-output-port (current-output-port)) (port (open-output-port file)))
                                 (set-current-output-port! port)
                                 (proc)
                                 (close-output-port port)
                                 (set-current-output-port! default-output-port))))

(define complex? (lambda (x) (number? x)))
(define real? (lambda (x) (number? x)))
(define rational? (lambda (x) (number? x)))
(define integer? (lambda (x) (number? x)))

(define exact? (lambda (x) (number? x)))
(define inexact? (lambda (x) #f))

(define quotient (lambda (n1 n2) (/ n1 n2)))

(define modulo (lambda (n1 n2)
                 (let* ((q (quotient n1 n2)) (v (- n1 (* q n2))))
                   (if (positive? n1) v (* -1 v)))))

(define reminder (lambda (n1 n2)
                   (let ((q (quotient n1 n2)))
                     (- n1 (* q n2)))))

(define numerator (lambda (x) (not-supported "numerator")))
(define denominator (lambda (x) (not-supported "denominator")))

(define exp  (lambda (x) (not-supported "exp ")))
(define log  (lambda (x) (not-supported "log ")))
(define sin  (lambda (x) (not-supported "sin ")))
(define cos  (lambda (x) (not-supported "cos ")))
(define tan  (lambda (x) (not-supported "tan ")))
(define asin (lambda (x) (not-supported "asin")))
(define acos (lambda (x) (not-supported "acos")))
(define atan (lambda (x) (not-supported "atan")))
(define sqrt (lambda (x) (not-supported "sqrt")))
(define expt (lambda (x y) (not-supported "expt")))
(define make-rectanglar (lambda (x y) (not-supported "make-rectanglar")))
(define make-polar (lambda (x y) (not-supported "make-polar")))
(define real-part (lambda (x) (not-supported "real-part")))
(define imag-part (lambda (x) (not-supported "imag-part")))
(define magnitude (lambda (z) (not-supported "magnitude")))
(define angle (lambda (z) (not-supported "angle")))
(define exact->inexact (lambda (z) (not-supported "exact->inexact")))
(define inexact->exact (lambda (z) (not-supported "inexact->exact")))

(define floor (lambda (x) x))
(define ceiling (lambda (x) x))
(define truncate (lambda (x) x))
(define round (lambda (x) x))

(define make-promise
  (lambda (proc)
    (let ((result-ready? #f)
          (result #f))
      (lambda ()
        (if result-ready?
            result
            (let ((x (proc)))
              (if result-ready?
                  result
                  (begin (set! result-ready? #t)
                         (set! result x)
                         result))))))))

(define-syntax delay
  (syntax-rules ()
    ((delay expression)
     (make-promise (lambda () expression)))))

(define-macro delay
  (lambda (expression)
  `(make-promise (lambda () ,expression))))


(define force
  (lambda (object)
    (object)))

(define values (lambda things
                 (call-with-current-continuation
                  (lambda (cont) (apply cont things)))))

(define-syntax aif
  (syntax-rules ()
    ((_ it a b c ...)
     (let ((it a)) (if it b c ...)))))

(define-syntax awhen
  (syntax-rules ()
    ((_ it pred body ...)
     (aif it pred (begin body ...)))))

(define-syntax awhile
  (syntax-rules ()
    ((_ it pred a)
     (do ((it pred pred))
         ((not it))
       a))))

(define-syntax aand
  (syntax-rules ()
    ((_ it a) #t
     (_ it a b c ...) (aif it a (_ it b c ...) #f))))


;;            (do ((expr (read port) (read port))
;;             (lst '() (cons expr lst)))
;;            ((eof-object? expr)
;;             (apply append lst))))))))

(define-syntax do
  (syntax-rules ()
    ;; 変数2つ commandなし
    ((_ ((a b c) (d e f))
        (pred g ...))
     (let loop ((a b) (d e))
       (if pred (begin g ...)
           (begin (loop c f)))))
    ;; 変数2つ commandあり
    ((_ ((a b c) (d e f))
        (pred g ...)
        x ...)
     (let loop ((a b) (d e))
       (if pred (begin g ...)
           (begin x ... (loop c f)))))
    ;; 変数2つ commandあり
    ((_ ((a b c) (d e))
        (pred)
        x ...)
     (let loop ((a b) (d e))
       (if pred #t
           (begin x ... (loop c e)))))
    ;; 変数1つ pred なし
    ((_ ((a b c))
        (pred)
       command ...)
     (let loop ((a b))
       (if pred #t
           (begin command ... (loop c)))))
    ;; 変数1つ commandあり
    ((_ ((a b c))
        (pred d ...)
       command ...)
     (let loop ((a b))
       (if pred (begin d ...)
           (begin command ... (loop c)))))))

(define find (lambda (pred list)
               (call/cc
                (lambda (return)
                  (for-each
                   (lambda (e) (if (pred e) (return e)))
                   list)
                  #f))))

(define (remove pred l)
  (filter (lambda (s) (not (pred s))) l))

(define-macro letrec
  ((lambda ()
     (define (letrec-defs def)
       `(define  ,(car def) ,@(cdr def)))
     (lambda (defs . exprs)
       `((lambda () ,@(map letrec-defs defs) ,@exprs))))))

(define-macro do
  (lambda (vars final . body)
    (let ((loop 'xxxx))
      `(letrec
     ((,loop
       (lambda ,(map car vars)
         (if ,(car final)
         ,(if (null? (cdr final))
              `(if #f #f)
              (cadr final))
         (begin
           ,@body
           (,loop ,@(map caddr vars)))))))
     (,loop ,@(map cadr vars))))))


(define-syntax unless
  (syntax-rules ()
    ((_ pred body ...)
     (if (not pred) (begin body ...)))))

(define (acons obj1 obj2 obj3)
  (cons (cons obj1 obj2) obj3))

(define-syntax aif
  (syntax-rules ()
    ((_ it a b c ...)
     (let ((it a)) (if it b c ...)))))


(define-macro aif
  (lambda (predicate consequent alternative)
    `(let ((it ,predicate))
       (if it
           ,consequent
           ,alternative))))

;; for test
;; (define-syntax unquote
;;   (syntax-rules ()
;;     ((_ a)
;;      (eval a (scheme-report-environment 5)))))
