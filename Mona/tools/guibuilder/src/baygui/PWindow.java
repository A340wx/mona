package guibuilder;

import java.awt.*;
import java.awt.event.*;
import java.io.*;

/**
 ウィンドウ部品
 */
public class PWindow extends PBase {
	/** 閉じるボタン (パレット) */
	static int icon_palette[] = {
		0xff1c1a1c,
		0xff8c8e8c,
		0xffcccecc,
		0xffacaeac,
		0xffeceeec,
		0xff9c9e9c,
		0xffdcdedc,
		0xffbcbebc,
		0xfffcfefc,
	};

	/** 閉じるボタン (データ) */
	static byte icon_data[] = {
		0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,
		0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,
		0x1,0x0,0x8,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x8,
		0x1,0x0,0x2,0x5,0x5,0x3,0x3,0x7,0x7,0x2,0x1,0x0,0x8,
		0x1,0x0,0x2,0x5,0x3,0x3,0x7,0x7,0x2,0x2,0x1,0x0,0x8,
		0x1,0x0,0x2,0x3,0x3,0x7,0x7,0x2,0x2,0x6,0x1,0x0,0x8,
		0x1,0x0,0x2,0x3,0x7,0x7,0x2,0x2,0x6,0x6,0x1,0x0,0x8,
		0x1,0x0,0x2,0x7,0x7,0x2,0x2,0x6,0x6,0x4,0x1,0x0,0x8,
		0x1,0x0,0x2,0x7,0x2,0x2,0x6,0x6,0x4,0x4,0x1,0x0,0x8,
		0x1,0x0,0x2,0x2,0x2,0x6,0x6,0x4,0x4,0x8,0x1,0x0,0x8,
		0x1,0x0,0x2,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x8,
		0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,
		0x2,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,
	};
	
	/** 部品通し番号 */
	private static int count = 0;
	
	/** コンストラクタ */
	public PWindow() {
	}
	
	/** 描画ハンドラ */
	public void paint(Graphics g) {
		int i, j;
		int w = getWidth();
		int h = getHeight();
		
		// 外枠
		g.setColor(COLOR_LIGHTGRAY);
		g.fillRect(0, 0, w, h);
		g.setColor(COLOR_BLACK);
		g.drawRect(0, 0, w - 1, h - 1);
		
		// 内枠
		g.setColor(COLOR_BLACK);
		g.drawRect(5, 21, w - 11, h - 27);
		
		// 枠
		g.setColor(COLOR_WHITE);
		g.drawLine(1, 1, w - 2, 1);
		g.drawLine(1, 1, 1, h - 2);
		g.drawLine(w - 5, 21, w - 5, h - 5);
		g.drawLine(5, h - 5, w - 5, h - 5);
		g.setColor(COLOR_GRAY);
		g.drawLine(w - 2, 2, w - 2, h - 2);
		g.drawLine(2, h - 2, w - 2, h - 2);
		g.drawLine(4, 20, w - 6, 20);
		g.drawLine(4, 20, 4, h - 6);
		
		// タイトルバー
		for (i = 4; i <= 14; i = i + 2) {
			g.setColor(COLOR_GRAY);
			g.drawLine(20, i, w - 7, i);
			g.setColor(COLOR_WHITE);
			g.drawLine(21, i + 1, w - 6, i + 1);
		}
		
		// 閉じるボタン
		for (i = 0; i < 13; i++) {
			for (j = 0; j < 13; j++) {
				g.setColor(new Color(icon_palette[icon_data[i * 13 + j] & 0xFF]));
				g.drawLine(j + 4, i + 4, j + 4, i + 4);
			}
		}

		// タイトル
		FontMetrics metrics = getFontMetrics(getFont());
		int fw = metrics.stringWidth(getCaption());
		int fh = - metrics.getAscent() + metrics.getDescent();
		g.setColor(COLOR_LIGHTGRAY);
		g.fillRect(((w - fw) / 2) - 4, 2, fw + 8, INSETS_TOP - 4);
		g.setColor(COLOR_BLACK);
		g.drawString(getCaption(), ((w - fw) / 2), (INSETS_TOP - fh) / 2);
		
		paintComponents(g);
	}
	
	//
	// IParts
	//
	
	/** 部品作成時に呼ばれる */
	public void create() {
		setBounds(100, 100, 200, 200);
		setForeground(DEFAULT_FORECOLOR);
		setBackground(DEFAULT_BACKCOLOR);
		setLayout(null);
		enableEvents(AWTEvent.MOUSE_EVENT_MASK);
		setName("Form" + (count + 1));
		setCaption("Form" + (count + 1));
		setFontStyle("FONT_PLAIN");
		count++;
	}
	
	/** 部品削除時に呼ばれる */
	public void dispose() {
		this.count = 0;
	}
	
	/** 指定したイベントがサポートされているかどうかを得る */
	public boolean getSupported(int eventType) {
		return false;
	}
	
	/** マウスイベント */
	public void processMouseEvent(MouseEvent e) {
		if (e.getID() == MouseEvent.MOUSE_PRESSED) {
			System.out.println("PWindow: source = " + e.getSource());
			((ApplicationWindow)getParent()).update(this);
		}
		super.processMouseEvent(e);
	}
}
