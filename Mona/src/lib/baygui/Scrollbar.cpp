/*
Copyright (c) 2004 bayside
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "baygui.h"

/** 垂直ボタン（パレット）*/
static unsigned int button_palette[] = {
	0xff040204,
	0xff8486dc,
	0xffdcdafc,
	0xff5456b4,
	0xffb4b2fc,
	0xfff4f2f4,
};

/** 垂直ボタン（データ）*/
static unsigned char button_data[] = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x5,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x4,0x0,
	0x0,0x2,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x5,0x2,0x2,0x2,0x2,0x2,0x2,0x4,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x4,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x5,0x2,0x2,0x2,0x2,0x2,0x2,0x4,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x4,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x5,0x2,0x2,0x2,0x2,0x2,0x2,0x4,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x4,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x5,0x2,0x2,0x2,0x2,0x2,0x2,0x4,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x4,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x1,0x0,
	0x0,0x2,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x1,0x0,
	0x0,0x4,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

/** 上向き矢印（パレット）*/
static unsigned int arrow_palette[] = {
	0xff040204,
	0xffcccecc,
	0xfffcfefc,
	0xffe4e6e4,
};

/** 上向き矢印（データ）*/
static unsigned char arrow1_data[] = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

/** 下向き矢印（データ）*/
static unsigned char arrow2_data[] = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x3,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
	0x0,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

Scrollbar::Scrollbar()
{
	this->orientation = VERTICAL;
	this->minimum = 0;
	this->maximum = 100;
	this->blocksize = 10;
	this->value = 0;
	this->blockEvent.setType(Event::BLOCK_INCLEMENT);
	this->blockEvent.setSource(this);
}

Scrollbar::Scrollbar(int orientation)
{
	this->orientation = orientation;
	this->minimum = 0;
	this->maximum = 100;
	this->blocksize = 10;
	this->value = 0;
	this->blockEvent.setType(Event::BLOCK_INCLEMENT);
	this->blockEvent.setSource(this);
}

Scrollbar::~Scrollbar()
{
}

void Scrollbar::setValue(int value)
{
	if (value < this->minimum) {
		this->value = this->minimum;
	} else if (value > this->maximum) {
		this->value = this->maximum;
	} else {
		this->value = value;
	}
	repaint();
}

void Scrollbar::setRect(int x, int y, int w, int h)
{
	// 幅と高さは16固定とする
	if (this->orientation == VERTICAL) {
		Control::setRect(x, y, 16, h);
	} else {
		Control::setRect(x, y, w, 16);
	}
}

void Scrollbar::onPaint(Graphics *g)
{
	int w = getWidth(), h = getHeight();
	
	// 外枠
	g->setColor(Color::GRAY);
	g->fillRect(0,0,getWidth(),getHeight());
	g->setColor(Color::BLACK);
	g->drawRect(0,0,getWidth(),getHeight());
	
	// 垂直スクロールバー
	if (this->orientation == VERTICAL) {
		// 上向き矢印
		for (int i = 0; i < 16; i++) {
			for (int j = 0; j < 16; j++) {
				g->drawPixel(j, i, arrow_palette[arrow1_data[i * 16 + j] & 0xFF]);
			}
		}
		// 下向き矢印
		for (int i = 0; i < 16; i++) {
			for (int j = 0; j < 16; j++) {
				g->drawPixel(j, i + h - 16, arrow_palette[arrow2_data[i * 16 + j] & 0xFF]);
			}
		}
		// ボタン
		int offset = 15 + (getHeight() - 47) * (getValue() - getMinimum()) / (getMaximum() - getMinimum());
		for (int i = 0; i < 17; i++) {
			for (int j = 0; j < 16; j++) {
				g->drawPixel(j, i + offset, button_palette[button_data[i * 16 + j] & 0xFF]);
			}
		}
	// 水平スクロールバー
	} else {
		// 左向き矢印
		for (int i = 0; i < 16; i++) {
			for (int j = 0; j < 16; j++) {
				g->drawPixel(i, j, arrow_palette[arrow1_data[i * 16 + j] & 0xFF]);
			}
		}
		// 右向き矢印
		for (int i = 0; i < 16; i++) {
			for (int j = 0; j < 16; j++) {
				g->drawPixel(i + w - 16, j, arrow_palette[arrow2_data[i * 16 + j] & 0xFF]);
			}
		}
		// ボタン
		int offset = 15 + (getWidth() - 47) * (getValue() - getMinimum()) / (getMaximum() - getMinimum());
		for (int i = 0; i < 17; i++) {
			for (int j = 0; j < 16; j++) {
				g->drawPixel(i + offset, j, button_palette[button_data[i * 16 + j] & 0xFF]);
			}
		}
	}
}

void Scrollbar::onEvent(Event *event)
{
	if (event->getType() == MouseEvent::MOUSE_PRESSED) {
		MouseEvent *me = (MouseEvent *)event;
		int mx = me->getX();
		int my = me->getY();
		// 垂直スクロールバー
		if (this->orientation == VERTICAL) {
			if (0 < my && my < 16) {
				setValue(this->value - this->blocksize);
				this->blockEvent.setType(Event::BLOCK_DECLEMENT);
				getParent()->onEvent(&this->blockEvent);
			} else if (getHeight() - 16 < my && my < getHeight()) {
				setValue(this->value + this->blocksize);
				this->blockEvent.setType(Event::BLOCK_INCLEMENT);
				getParent()->onEvent(&this->blockEvent);
			}
		// 水平スクロールバー
		} else {
			if (0 < mx && mx < 16) {
				setValue(this->value - this->blocksize);
				this->blockEvent.setType(Event::BLOCK_DECLEMENT);
				getParent()->onEvent(&this->blockEvent);
			} else if (getWidth() - 16 < mx && mx < getWidth()) {
				setValue(this->value + this->blocksize);
				this->blockEvent.setType(Event::BLOCK_INCLEMENT);
				getParent()->onEvent(&this->blockEvent);
			}
		}
	}
}
