; This file was automatically generated by IL2Asm16.

[bits 16]
jmp SecondBootMain

ILMain:
	call	Mona_SecondBoot___cctor
	call	Mona_FDC___cctor
	call	Mona_VESA___cctor
	call	Mona_SecondBoot__Main
	ret

; class <Module>

; class Mona.SecondBoot

Mona_SecondBoot__fileseg dw 0
Mona_SecondBoot__sizeptr dw 0

; void Mona.SecondBoot::Main()
Mona_SecondBoot__Main:
;PE_0000025C: call 06000021
	call	Mona_Console__WriteLine
;PE_00000261: ldstr 70000001
	mov	ax,	US_00000001
	push	ax
;PE_00000266: call 06000022
	call	Mona_Console__WriteLine__string
;PE_0000026B: ldstr 7000000D
	mov	ax,	US_0000000D
	push	ax
;PE_00000270: call 06000022
	call	Mona_Console__WriteLine__string
;PE_00000275: call 06000021
	call	Mona_Console__WriteLine
;PE_0000027A: [native] get register
	push	cs
;PE_0000027F: [native] set register
	pop	ds
;PE_00000284: [native] inline
	cli
;PE_0000028F: call 0600000D
	call	Mona_A20__Enable
;PE_00000294: ldstr 70000045
	mov	ax,	US_00000045
	push	ax
;PE_00000299: call 06000002
	call	Mona_SecondBoot__ReadServer__string
;PE_0000029E: ldstr 7000005B
	mov	ax,	US_0000005B
	push	ax
;PE_000002A3: call 06000002
	call	Mona_SecondBoot__ReadServer__string
;PE_000002A8: ldstr 7000006D
	mov	ax,	US_0000006D
	push	ax
;PE_000002AD: call 06000002
	call	Mona_SecondBoot__ReadServer__string
;PE_000002B2: ldstr 70000085
	mov	ax,	US_00000085
	push	ax
;PE_000002B7: call 06000002
	call	Mona_SecondBoot__ReadServer__string
;PE_000002BC: ldstr 7000009D
	mov	ax,	US_0000009D
	push	ax
;PE_000002C1: call 06000003
	call	Mona_SecondBoot__ReadConfig__string
;PE_000002C6: call 06000004
	call	Mona_SecondBoot__SetVesaMode
;PE_000002CB: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
	push	ax
;PE_000002CC: call 06000006
	call	Mona_SecondBoot__WriteSize__u2
;PE_000002D1: ret
	ret

; void Mona.SecondBoot::ReadServer(string)
Mona_SecondBoot__ReadServer__string:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_000002E0: ldsfld 04000006
	push	word [cs:Mona_SecondBoot__fileseg]
;PE_000002E5: ldarg.0
	push	word [ss:bp+4]
;PE_000002E6: call 06000005
	call	u2__Mona_SecondBoot__ReadFile__u2_string
;	push	ax	; [optimize] ignore
;PE_000002EB: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000002EC: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000002ED: brtrue.s 2A
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	or	ax,	ax
	jnz	PE_00000319
;PE_000002EF: ldstr 700000AF
	mov	ax,	US_000000AF
	push	ax
;PE_000002F4: call 06000022
	call	Mona_Console__WriteLine__string
;PE_000002F9: ldstr 700000CD
	mov	ax,	US_000000CD
	push	ax
;PE_000002FE: call 06000022
	call	Mona_Console__WriteLine__string
;PE_00000303: [native] inline
	cli
;PE_0000030E: [native] inline
	hlt
PE_00000319: ;ldloc.0
	push	word [ss:bp-2]
;PE_0000031A: call 06000006
	call	Mona_SecondBoot__WriteSize__u2
;PE_0000031F: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000320: ldc.i4.s 20
	mov	ax,	32
;	push	ax	; [optimize] ignore
;PE_00000322: mul
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	word [ss:bp-2]	; [optimize] add
	mul	dx
;	push	ax	; [optimize] ignore
;PE_00000324: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000325: ldsfld 04000006
;	push	word [cs:Mona_SecondBoot__fileseg]	; [optimize] ignore
;PE_0000032A: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000032B: add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [cs:Mona_SecondBoot__fileseg]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [cs:Mona_SecondBoot__fileseg]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_0000032D: stsfld 04000006
;	pop	word [cs:Mona_SecondBoot__fileseg]	; [optimize] ignore
	mov	word [cs:Mona_SecondBoot__fileseg],	ax	; [optimize] add
;PE_00000332: ret
	mov	sp,	bp
	pop	bp
	ret	2

; void Mona.SecondBoot::ReadConfig(string)
Mona_SecondBoot__ReadConfig__string:
	push	bp
	mov	bp,	sp
	sub	sp,	10
;PE_00000340: ldc.i4 00008800
	mov	ax,	34816
	push	ax
;PE_00000345: ldarg.0
	push	word [ss:bp+4]
;PE_00000346: call 06000005
	call	u2__Mona_SecondBoot__ReadFile__u2_string
;	push	ax	; [optimize] ignore
;PE_0000034B: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_0000034C: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000034D: brtrue.s 0F
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	or	ax,	ax
	jnz	PE_0000035E
;PE_0000034F: ldstr 700000FB
	mov	ax,	US_000000FB
	push	ax
;PE_00000354: call 06000022
	call	Mona_Console__WriteLine__string
;PE_00000359: br 000000E5
	jmp	PE_00000443
PE_0000035E: ;ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_0000035F: [native] set register
;	pop	es	; [optimize] ignore
	mov	es,	ax	; [optimize] add
;PE_00000364: [native] set register
	mov	di,	61440
;PE_0000036E: [native] set register
	mov	ax,	[ss:bp-2]
;PE_00000374: [native] inline
	mov	[es:di],	ax
;PE_0000037F: [native] set register
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;PE_00000385: [native] inline
	mov	[es:di+2],	ax
;PE_00000390: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000391: ldc.i4 00000200
	mov	ax,	512
;	push	ax	; [optimize] ignore
;PE_00000396: mul
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	word [ss:bp-2]	; [optimize] add
	mul	dx
;	push	ax	; [optimize] ignore
;PE_00000398: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000399: ldc.i4 00008800
	mov	ax,	34816
;	push	ax	; [optimize] ignore
;PE_0000039E: [native] set register
;	pop	es	; [optimize] ignore
	mov	es,	ax	; [optimize] add
;PE_000003A3: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000003A4: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_000003A5: br 00000092
	jmp	PE_0000043C
PE_000003AA: ;ldstr 70000183
	mov	ax,	US_00000183
	push	ax
;PE_000003AF: ldloc.1
	push	word [ss:bp-4]
;PE_000003B0: call 0600000A
	call	boolean__Mona_Str__StartsWith__string_u2
;	push	ax	; [optimize] ignore
;PE_000003B5: brfalse.s 1F
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jz	PE_000003D6
;PE_000003B7: ldloc.1
	push	word [ss:bp-4]
;PE_000003B8: ldstr 70000183
	mov	ax,	US_00000183
	push	ax
;PE_000003BD: call 06000009
	call	u2__Mona_Str__GetLength__string
;	push	ax	; [optimize] ignore
;PE_000003C2: add
;	pop	ax	; [optimize] ignore
	pop	dx
	add	ax,	dx
	push	ax
;PE_000003C4: call 0600000B
	call	u2__Mona_Str__ReadNumber__u2
;	push	ax	; [optimize] ignore
;PE_000003C9: stloc.2
;	pop	word [ss:bp-6]	; [optimize] ignore
	mov	word [ss:bp-6],	ax	; [optimize] add
;PE_000003CA: ldloc.2
;	push	word [ss:bp-6]	; [optimize] ignore
;PE_000003CB: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000003CC: ble.s 06
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-6]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-6]	; [optimize] add
	jnc	PE_000003D4
;PE_000003CE: ldloc.2
	push	word [ss:bp-6]
;PE_000003CF: stsfld 04000010
	pop	word [cs:Mona_VESA__Resolution]
PE_000003D4: ;br.s 2A
	jmp	PE_00000400
PE_000003D6: ;ldstr 700001A5
	mov	ax,	US_000001A5
	push	ax
;PE_000003DB: ldloc.1
	push	word [ss:bp-4]
;PE_000003DC: call 0600000A
	call	boolean__Mona_Str__StartsWith__string_u2
;	push	ax	; [optimize] ignore
;PE_000003E1: brfalse.s 1D
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jz	PE_00000400
;PE_000003E3: ldloc.1
	push	word [ss:bp-4]
;PE_000003E4: ldstr 700001A5
	mov	ax,	US_000001A5
	push	ax
;PE_000003E9: call 06000009
	call	u2__Mona_Str__GetLength__string
;	push	ax	; [optimize] ignore
;PE_000003EE: add
;	pop	ax	; [optimize] ignore
	pop	dx
	add	ax,	dx
	push	ax
;PE_000003F0: call 0600000B
	call	u2__Mona_Str__ReadNumber__u2
;	push	ax	; [optimize] ignore
;PE_000003F5: stloc.3
;	pop	word [ss:bp-8]	; [optimize] ignore
	mov	word [ss:bp-8],	ax	; [optimize] add
;PE_000003F6: ldloc.3
;	push	word [ss:bp-8]	; [optimize] ignore
;PE_000003F7: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000003F8: ble.s 06
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-8]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-8]	; [optimize] add
	jnc	PE_00000400
;PE_000003FA: ldloc.3
	push	word [ss:bp-8]
;PE_000003FB: stsfld 04000011
	pop	word [cs:Mona_VESA__Bpp]
PE_00000400: ;br.s 36
	jmp	PE_00000438
PE_00000402: ;[native] set register
	mov	di,	[ss:bp-4]
;PE_00000408: [native] inline
	mov	al,	[es:di]
;PE_00000413: [native] inline
	mov	ah,	0
;PE_0000041E: [native] get register
;	push	ax	; [optimize] ignore
;PE_00000423: stloc.s 04
;	pop	word [ss:bp-10]	; [optimize] ignore
	mov	word [ss:bp-10],	ax	; [optimize] add
;PE_00000425: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000426: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000427: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000429: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
;	add	word [ss:bp-4],	1	; [optimize] add, [optimize] ignore
	inc	word [ss:bp-4]	; [Optimize] add
;PE_0000042A: ldloc.s 04
;	push	word [ss:bp-10]	; [optimize] ignore
;PE_0000042C: ldc.i4.s 0D
;	mov	ax,	13	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_0000042E: beq.s 06
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-10]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
;	cmp	ax,	word [ss:bp-10]	; [optimize] add, [optimize] ignore
	cmp	word [ss:bp-10],	13	; [optimize] add
	je	PE_00000436
;PE_00000430: ldloc.s 04
;	push	word [ss:bp-10]	; [optimize] ignore
;PE_00000432: ldc.i4.s 0A
;	mov	ax,	10	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000434: bne.un.s 02
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-10]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
;	cmp	ax,	word [ss:bp-10]	; [optimize] add, [optimize] ignore
	cmp	word [ss:bp-10],	10	; [optimize] add
	jne	PE_00000438
PE_00000436: ;br.s 04
	jmp	PE_0000043C
PE_00000438: ;ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000439: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000043A: blt.s C6
;	pop	ax	; [optimize] ignore
;	mov	ax,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	word [ss:bp-4]	; [optimize] add
;	cmp	dx,	ax	; [optimize] ignore
	cmp	dx,	word [ss:bp-2]	; [optimize] add
	jc	PE_00000402
PE_0000043C: ;ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_0000043D: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000043E: blt FFFFFF67
;	pop	ax	; [optimize] ignore
;	mov	ax,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	word [ss:bp-4]	; [optimize] add
;	cmp	dx,	ax	; [optimize] ignore
	cmp	dx,	word [ss:bp-2]	; [optimize] add
	jc	PE_000003AA
PE_00000443: ;ret
	mov	sp,	bp
	pop	bp
	ret	2

; void Mona.SecondBoot::SetVesaMode()
Mona_SecondBoot__SetVesaMode:
	push	bp
	mov	bp,	sp
	sub	sp,	6
;PE_00000450: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000451: [native] set register
;	pop	es	; [optimize] ignore
	mov	es,	ax	; [optimize] add
;PE_00000456: ldsfld 04000010
	push	word [cs:Mona_VESA__Resolution]
;PE_0000045B: stloc.0
	pop	word [ss:bp-2]
;PE_0000045C: ldc.i4 0000010F
	mov	ax,	271
;	push	ax	; [optimize] ignore
;PE_00000461: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_00000462: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000463: ldc.i4 00000140
	mov	ax,	320
;	push	ax	; [optimize] ignore
;PE_00000468: ble.s 05
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-2]	; [optimize] add
	jnc	PE_0000046F
;PE_0000046A: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_0000046B: ldc.i4.3
;	mov	ax,	3	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_0000046C: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_0000046E: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
	add	word [ss:bp-4],	3	; [optimize] add
PE_0000046F: ;ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000470: ldc.i4 00000280
	mov	ax,	640
;	push	ax	; [optimize] ignore
;PE_00000475: ble.s 05
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-2]	; [optimize] add
	jnc	PE_0000047C
;PE_00000477: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000478: ldc.i4.3
;	mov	ax,	3	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000479: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_0000047B: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
	add	word [ss:bp-4],	3	; [optimize] add
PE_0000047C: ;ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000047D: ldc.i4 00000320
	mov	ax,	800
;	push	ax	; [optimize] ignore
;PE_00000482: ble.s 05
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-2]	; [optimize] add
	jnc	PE_00000489
;PE_00000484: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000485: ldc.i4.3
;	mov	ax,	3	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000486: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000488: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
	add	word [ss:bp-4],	3	; [optimize] add
PE_00000489: ;ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000048A: ldc.i4 00000400
	mov	ax,	1024
;	push	ax	; [optimize] ignore
;PE_0000048F: ble.s 05
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-2]	; [optimize] add
	jnc	PE_00000496
;PE_00000491: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000492: ldc.i4.3
;	mov	ax,	3	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000493: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000495: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
	add	word [ss:bp-4],	3	; [optimize] add
PE_00000496: ;ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000497: ldc.i4 00000500
	mov	ax,	1280
;	push	ax	; [optimize] ignore
;PE_0000049C: ble.s 05
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-2]	; [optimize] add
	jnc	PE_000004A3
;PE_0000049E: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_0000049F: ldc.i4.3
;	mov	ax,	3	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000004A0: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000004A2: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
	add	word [ss:bp-4],	3	; [optimize] add
PE_000004A3: ;ldsfld 04000011
	push	word [cs:Mona_VESA__Bpp]
;PE_000004A8: stloc.2
	pop	word [ss:bp-6]
;PE_000004A9: br.s 37
	jmp	PE_000004E2
PE_000004AB: ;ldloc.2
;	push	word [ss:bp-6]	; [optimize] ignore
;PE_000004AC: ldc.i4.s 10
	mov	ax,	16
;	push	ax	; [optimize] ignore
;PE_000004AE: ble.s 14
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-6]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-6]	; [optimize] add
	jnc	PE_000004C4
;PE_000004B0: ldloc.1
	push	word [ss:bp-4]
;PE_000004B1: ldc.i4 00000800
	mov	ax,	2048
	push	ax
;PE_000004B6: ldc.i4 00000830
	mov	ax,	2096
	push	ax
;PE_000004BB: call 06000018
	call	boolean__Mona_VESA__TryMode__u2_u2_u2
;	push	ax	; [optimize] ignore
;PE_000004C0: brfalse.s 02
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jz	PE_000004C4
;PE_000004C2: br.s 40
	jmp	PE_00000504
PE_000004C4: ;ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_000004C5: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000004C6: sub
;	pop	dx	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
;	mov	dx,	1	; [optimize] add, [optimize] ignore
;	pop	ax	; [optimize] ignore
;	mov	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	sub	ax,	dx	; [optimize] ignore
;	sub	ax,	1	; [optimize] add, [optimize] ignore
;	dec	ax	; [Optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000004C8: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
	dec	word [ss:bp-4]	; [optimize] add
;PE_000004C9: ldloc.1
	push	word [ss:bp-4]
;PE_000004CA: ldc.i4 00000800
	mov	ax,	2048
	push	ax
;PE_000004CF: ldc.i4 00000830
	mov	ax,	2096
	push	ax
;PE_000004D4: call 06000018
	call	boolean__Mona_VESA__TryMode__u2_u2_u2
;	push	ax	; [optimize] ignore
;PE_000004D9: brfalse.s 02
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jz	PE_000004DD
;PE_000004DB: br.s 27
	jmp	PE_00000504
PE_000004DD: ;ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_000004DE: ldc.i4.2
;	mov	ax,	2	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000004DF: sub
;	pop	dx	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
;	mov	dx,	2	; [optimize] add, [optimize] ignore
;	pop	ax	; [optimize] ignore
;	mov	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	sub	ax,	dx	; [optimize] ignore
;	sub	ax,	2	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000004E1: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
	sub	word [ss:bp-4],	2	; [optimize] add
PE_000004E2: ;ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_000004E3: ldc.i4 0000010E
;	mov	ax,	270	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000004E8: bge.s C1
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	cmp	dx,	ax	; [optimize] ignore
;	cmp	dx,	270	; [optimize] add, [optimize] ignore
	cmp	word [ss:bp-4],	270	; [optimize] add
	jnc	PE_000004AB
;PE_000004EA: [native] set register
	mov	di,	2048
;PE_000004F4: [native] inline
	mov	byte [es:di],	'N'
;PE_000004FF: call 0600001C
	call	Mona_VESA__SetVGA
PE_00000504: ;ret
	mov	sp,	bp
	pop	bp
	ret

; u2 Mona.SecondBoot::ReadFile(u2, string)
u2__Mona_SecondBoot__ReadFile__u2_string:
	push	bp
	mov	bp,	sp
	sub	sp,	6
;PE_00000514: ldstr 70000219
	mov	ax,	US_00000219
	push	ax
;PE_00000519: call 06000020
	call	Mona_Console__Write__string
;PE_0000051E: ldarg.1
	push	word [ss:bp+4]
;PE_0000051F: call 06000020
	call	Mona_Console__Write__string
;PE_00000524: ldc.i4.s 20
	mov	ax,	32
	push	ax
;PE_00000526: call 0600001F
	call	Mona_Console__Write__char
;PE_0000052B: ldarg.1
	push	word [ss:bp+4]
;PE_0000052C: call 06000010
	call	u2__Mona_FDC__SearchFile__string
;	push	ax	; [optimize] ignore
;PE_00000531: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000532: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000533: brtrue.s 13
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	or	ax,	ax
	jnz	PE_00000548
;PE_00000535: call 06000021
	call	Mona_Console__WriteLine
;PE_0000053A: ldstr 7000022B
	mov	ax,	US_0000022B
	push	ax
;PE_0000053F: call 06000022
	call	Mona_Console__WriteLine__string
;PE_00000544: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000545: stloc.2
;	pop	word [ss:bp-6]	; [optimize] ignore
	mov	word [ss:bp-6],	ax	; [optimize] add
;PE_00000546: br.s 65
	jmp	PE_000005AD
PE_00000548: ;[native] inline
	push	es
;PE_00000553: ldarg.0
	push	word [ss:bp+6]
;PE_00000554: [native] set register
	pop	es
;PE_00000559: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_0000055A: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_0000055B: br.s 3A
	jmp	PE_00000597
PE_0000055D: ;ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000055E: ldc.i4.s 1F
	mov	ax,	31
;	push	ax	; [optimize] ignore
;PE_00000560: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [ss:bp-2]	; [optimize] add
	push	ax
;PE_00000562: ldc.i4.1
	mov	ax,	1
	push	ax
;PE_00000563: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
	push	ax
;PE_00000564: call 06000012
	call	Mona_FDC__ReadSectors__u2_u2_u2
;PE_00000569: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_0000056A: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_0000056B: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_0000056D: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
;	add	word [ss:bp-4],	1	; [optimize] add, [optimize] ignore
	inc	word [ss:bp-4]	; [Optimize] add
;PE_0000056E: [native] get register
;	push	es	; [optimize] ignore
;PE_00000573: ldc.i4.s 20
	mov	ax,	32
;	push	ax	; [optimize] ignore
;PE_00000575: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	es	; [optimize] add
	add	ax,	dx
;	push	ax	; [optimize] ignore
;PE_00000577: [native] set register
;	pop	es	; [optimize] ignore
	mov	es,	ax	; [optimize] add
;PE_0000057C: ldstr 70000265
	mov	ax,	US_00000265
	push	ax
;PE_00000581: call 06000020
	call	Mona_Console__Write__string
;PE_00000586: ldloc.0
	push	word [ss:bp-2]
;PE_00000587: call 06000011
	call	u2__Mona_FDC__GetFAT__u2
;	push	ax	; [optimize] ignore
;PE_0000058C: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_0000058D: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000058E: ldc.i4 00000FFF
;	mov	ax,	4095	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000593: bne.un.s 02
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
;	cmp	ax,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
	cmp	word [ss:bp-2],	4095	; [optimize] add
	jne	PE_00000597
;PE_00000595: br.s 02
	jmp	PE_00000599
PE_00000597: ;br.s C4
	jmp	PE_0000055D
PE_00000599: ;[native] inline
	pop	es
;PE_000005A4: call 06000021
	call	Mona_Console__WriteLine
;PE_000005A9: ldloc.1
	push	word [ss:bp-4]
;PE_000005AA: stloc.2
	pop	word [ss:bp-6]
;PE_000005AB: br.s 00
;	jmp	PE_000005AD	; [optimize] ignore
PE_000005AD: ;ldloc.2
;	push	word [ss:bp-6]	; [optimize] ignore
;PE_000005AE: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-6]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	4

; void Mona.SecondBoot::WriteSize(u2)
Mona_SecondBoot__WriteSize__u2:
	push	bp
	mov	bp,	sp
;PE_000005BC: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000005BD: [native] set register
;	pop	es	; [optimize] ignore
	mov	es,	ax	; [optimize] add
;PE_000005C2: ldsfld 04000007
;	push	word [cs:Mona_SecondBoot__sizeptr]	; [optimize] ignore
;PE_000005C7: [native] set register
;	pop	di	; [optimize] ignore
	mov	di,	word [cs:Mona_SecondBoot__sizeptr]	; [optimize] add
;PE_000005CC: [native] set register
	mov	ax,	[ss:bp+4]
;PE_000005D2: [native] inline
	mov	[es:di],	ax
;PE_000005DD: [native] set register
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;PE_000005E3: [native] inline
	mov	[es:di+2],	ax
;PE_000005EE: ldsfld 04000007
;	push	word [cs:Mona_SecondBoot__sizeptr]	; [optimize] ignore
;PE_000005F3: ldc.i4.4
;	mov	ax,	4	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000005F4: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [cs:Mona_SecondBoot__sizeptr]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [cs:Mona_SecondBoot__sizeptr]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000005F6: stsfld 04000007
;	pop	word [cs:Mona_SecondBoot__sizeptr]	; [optimize] ignore
;	mov	word [cs:Mona_SecondBoot__sizeptr],	ax	; [optimize] add, [optimize] ignore
	add	word [cs:Mona_SecondBoot__sizeptr],	4	; [optimize] add
;PE_000005FB: ret
	pop	bp
	ret	2

; void Mona.SecondBoot::.cctor()
Mona_SecondBoot___cctor:
;PE_00000608: ldc.i4 00000120
	mov	ax,	288
;	push	ax	; [optimize] ignore
;PE_0000060D: stsfld 04000006
;	pop	word [cs:Mona_SecondBoot__fileseg]	; [optimize] ignore
	mov	word [cs:Mona_SecondBoot__fileseg],	ax	; [optimize] add
;PE_00000612: ldc.i4 0000F004
	mov	ax,	61444
;	push	ax	; [optimize] ignore
;PE_00000617: stsfld 04000007
;	pop	word [cs:Mona_SecondBoot__sizeptr]	; [optimize] ignore
	mov	word [cs:Mona_SecondBoot__sizeptr],	ax	; [optimize] add
;PE_0000061C: ret
	ret

; class Mona.Str

; u2 Mona.Str::GetLength(string)
u2__Mona_Str__GetLength__string:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_00000640: ldarg.0
;	push	word [ss:bp+4]	; [optimize] ignore
;PE_00000646: [native] set register
;	pop	si	; [optimize] ignore
	mov	si,	word [ss:bp+4]	; [optimize] add
;PE_0000064B: [native] inline
	mov	al,	[si]
;PE_00000656: [native] inline
	mov	ah,	0
;PE_00000661: [native] get register
;	push	ax	; [optimize] ignore
;PE_00000666: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000667: br.s 00
;	jmp	PE_00000669	; [optimize] ignore
;PE_00000669: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000066A: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	2

; boolean Mona.Str::StartsWith(string, u2)
boolean__Mona_Str__StartsWith__string_u2:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_00000678: ldarg.0
;	push	word [ss:bp+6]	; [optimize] ignore
;PE_0000067E: [native] set register
;	pop	si	; [optimize] ignore
	mov	si,	word [ss:bp+6]	; [optimize] add
;PE_00000683: [native] inline
	mov	cl,	[si]
;PE_0000068E: [native] inline
	mov	ch,	0
;PE_00000699: [native] inline
	inc	si
;PE_000006A4: [native] set register
	mov	di,	[ss:bp+4]
;PE_000006AA: [native] inline
	rep	cmpsb
;PE_000006B5: [native] get flag
	jz	NM_00000000
	xor	ax,	ax
	jmp	NM_00000001
NM_00000000: ;[native] get flag internal
	mov	ax,	1
NM_00000001: ;[native] get flag internal
;	push	ax	; [optimize] ignore
;PE_000006BA: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000006BB: br.s 00
;	jmp	PE_000006BD	; [optimize] ignore
;PE_000006BD: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000006BE: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	4

; u2 Mona.Str::ReadNumber(u2)
u2__Mona_Str__ReadNumber__u2:
	push	bp
	mov	bp,	sp
	sub	sp,	6
;PE_000006CC: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000006CD: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000006CE: [native] set register
	mov	di,	[ss:bp+4]
;PE_000006D4: br.s 42
	jmp	PE_00000718
PE_000006D6: ;[native] inline
	mov	al,	[es:di]
;PE_000006E1: [native] inline
	mov	ah,	0
;PE_000006EC: [native] inline
	inc	di
;PE_000006F7: [native] get register
;	push	ax	; [optimize] ignore
;PE_000006FC: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_000006FD: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_000006FE: ldc.i4.s 30
;	mov	ax,	48	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000700: blt.s 05
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	cmp	dx,	ax	; [optimize] ignore
;	cmp	dx,	48	; [optimize] add, [optimize] ignore
	cmp	word [ss:bp-4],	48	; [optimize] add
	jc	PE_00000707
;PE_00000702: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000703: ldc.i4.s 39
	mov	ax,	57
;	push	ax	; [optimize] ignore
;PE_00000705: ble.s 02
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-4]	; [optimize] add
	jnc	PE_00000709
PE_00000707: ;br.s 11
	jmp	PE_0000071A
PE_00000709: ;ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000070A: ldc.i4.s 0A
	mov	ax,	10
;	push	ax	; [optimize] ignore
;PE_0000070C: mul
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	word [ss:bp-2]	; [optimize] add
	mul	dx
;	push	ax	; [optimize] ignore
;PE_0000070E: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_0000070F: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000710: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000711: ldc.i4.s 30
;	mov	ax,	48	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000713: sub
;	pop	dx	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
;	mov	dx,	48	; [optimize] add, [optimize] ignore
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-4]	; [optimize] add
;	sub	ax,	dx	; [optimize] ignore
	sub	ax,	48	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000715: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [ss:bp-2]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000717: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
PE_00000718: ;br.s BC
	jmp	PE_000006D6
PE_0000071A: ;ldloc.0
	push	word [ss:bp-2]
;PE_0000071B: stloc.2
	pop	word [ss:bp-6]
;PE_0000071C: br.s 00
;	jmp	PE_0000071E	; [optimize] ignore
;PE_0000071E: ldloc.2
;	push	word [ss:bp-6]	; [optimize] ignore
;PE_0000071F: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-6]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	2

; class Mona.A20

; void Mona.A20::Enable()
Mona_A20__Enable:
;PE_00000740: call 0600000E
	call	Mona_A20__Wait
;PE_00000745: ldc.i4.s 64
;	mov	ax,	100	; [optimize] ignore
;	push	ax	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
	mov	dx,	100	; [optimize] add
;PE_00000747: ldc.i4 000000D1
	mov	ax,	209
;	push	ax	; [optimize] ignore
;PE_0000074C: [native] out
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	out	dx,	al
;PE_00000751: call 0600000E
	call	Mona_A20__Wait
;PE_00000756: ldc.i4.s 60
;	mov	ax,	96	; [optimize] ignore
;	push	ax	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
	mov	dx,	96	; [optimize] add
;PE_00000758: ldc.i4 000000DF
	mov	ax,	223
;	push	ax	; [optimize] ignore
;PE_0000075D: [native] out
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	out	dx,	al
;PE_00000762: call 0600000E
	call	Mona_A20__Wait
;PE_00000767: ldc.i4.s 64
;	mov	ax,	100	; [optimize] ignore
;	push	ax	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
	mov	dx,	100	; [optimize] add
;PE_00000769: ldc.i4 000000FF
	mov	ax,	255
;	push	ax	; [optimize] ignore
;PE_0000076E: [native] out
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	out	dx,	al
;PE_00000773: ret
	ret

; void Mona.A20::Wait()
Mona_A20__Wait:
;PE_00000780: br.s 00
;	jmp	PE_00000782	; [optimize] ignore
PE_00000782: ;[native] in
	in	al,	100
	mov	ah,	0
;	push	ax	; [optimize] ignore
	mov	dx,	ax	; [optimize] add
;PE_00000789: ldc.i4.2
	mov	ax,	2
;	push	ax	; [optimize] ignore
;PE_0000078A: and
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	and	ax,	dx
;	push	ax	; [optimize] ignore
;PE_0000078B: brtrue.s F5
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jnz	PE_00000782
;PE_0000078D: ret
	ret

; class Mona.FDC

Mona_FDC__buffer dw 0

; u2 Mona.FDC::SearchFile(string)
u2__Mona_FDC__SearchFile__string:
	push	bp
	mov	bp,	sp
	sub	sp,	10
;PE_000007B0: [native] inline
	push	es
;PE_000007BB: ldc.i4 00009000
	mov	ax,	36864
;	push	ax	; [optimize] ignore
;PE_000007C0: [native] set register
;	pop	es	; [optimize] ignore
	mov	es,	ax	; [optimize] add
;PE_000007C5: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000007C6: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000007C7: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000007C8: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_000007C9: ldarg.0
	push	word [ss:bp+4]
;PE_000007CA: call 06000015
	call	string__Mona_FDC__ConvertFileName__string
;	push	ax	; [optimize] ignore
;PE_000007CF: stloc.2
;	pop	word [ss:bp-6]	; [optimize] ignore
	mov	word [ss:bp-6],	ax	; [optimize] add
;PE_000007D0: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000007D1: stloc.3
;	pop	word [ss:bp-8]	; [optimize] ignore
	mov	word [ss:bp-8],	ax	; [optimize] add
;PE_000007D2: br.s 31
	jmp	PE_00000805
PE_000007D4: ;ldloc.2
	push	word [ss:bp-6]
;PE_000007D5: ldloc.0
	push	word [ss:bp-2]
;PE_000007D6: call 0600000A
	call	boolean__Mona_Str__StartsWith__string_u2
;	push	ax	; [optimize] ignore
;PE_000007DB: brfalse.s 1D
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jz	PE_000007FA
;PE_000007DD: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000007DE: ldc.i4.s 1A
	mov	ax,	26
;	push	ax	; [optimize] ignore
;PE_000007E0: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [ss:bp-2]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000007E2: [native] set register
;	pop	di	; [optimize] ignore
	mov	di,	ax	; [optimize] add
;PE_000007E7: [native] inline
	mov	ax,	[es:di]
;PE_000007F2: [native] get register
;	push	ax	; [optimize] ignore
;PE_000007F7: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_000007F8: br.s 13
	jmp	PE_0000080D
PE_000007FA: ;ldloc.3
;	push	word [ss:bp-8]	; [optimize] ignore
;PE_000007FB: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000007FC: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-8]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-8]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000007FE: stloc.3
;	pop	word [ss:bp-8]	; [optimize] ignore
;	mov	word [ss:bp-8],	ax	; [optimize] add, [optimize] ignore
	add	word [ss:bp-8],	1	; [optimize] add
;PE_000007FF: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000800: ldc.i4.s 20
;	mov	ax,	32	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000802: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000804: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
;	mov	word [ss:bp-2],	ax	; [optimize] add, [optimize] ignore
	add	word [ss:bp-2],	32	; [optimize] add
PE_00000805: ;ldloc.3
;	push	word [ss:bp-8]	; [optimize] ignore
;PE_00000806: ldc.i4 000000E0
;	mov	ax,	224	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_0000080B: blt.s C7
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-8]	; [optimize] add, [optimize] ignore
;	cmp	dx,	ax	; [optimize] ignore
;	cmp	dx,	224	; [optimize] add, [optimize] ignore
	cmp	word [ss:bp-8],	224	; [optimize] add
	jc	PE_000007D4
PE_0000080D: ;[native] inline
	pop	es
;PE_00000818: ldloc.1
	push	word [ss:bp-4]
;PE_00000819: stloc.s 04
	pop	word [ss:bp-10]
;PE_0000081B: br.s 00
;	jmp	PE_0000081D	; [optimize] ignore
;PE_0000081D: ldloc.s 04
;	push	word [ss:bp-10]	; [optimize] ignore
;PE_0000081F: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-10]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	2

; u2 Mona.FDC::GetFAT(u2)
u2__Mona_FDC__GetFAT__u2:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_0000082C: [native] set register
	mov	si,	[ss:bp+4]
;PE_00000832: [native] inline
	push	es
;PE_0000083D: ldc.i4 00009000
	mov	ax,	36864
;	push	ax	; [optimize] ignore
;PE_00000842: [native] set register
;	pop	es	; [optimize] ignore
	mov	es,	ax	; [optimize] add
;PE_00000847: ldc.i4 00006000
;	mov	ax,	24576	; [optimize] ignore
;	push	ax	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
;	mov	dx,	24576	; [optimize] add, [optimize] ignore
;PE_0000084C: ldarg.0
;	push	word [ss:bp+4]	; [optimize] ignore
;PE_0000084D: add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp+4]	; [optimize] add
;	pop	dx	; [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	24576	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_0000084F: [native] set register
;	pop	bx	; [optimize] ignore
	mov	bx,	ax	; [optimize] add
;PE_00000854: [native] inline
	shr	si,	1
;PE_0000085F: [native] inline
	mov	cx,	[es:si+bx]
;PE_0000086A: [native] get flag
	jc	NM_00000002
	xor	ax,	ax
	jmp	NM_00000003
NM_00000002: ;[native] get flag internal
	mov	ax,	1
NM_00000003: ;[native] get flag internal
;	push	ax	; [optimize] ignore
;PE_0000086F: brfalse.s 0D
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jz	PE_0000087E
;PE_00000871: [native] inline
	shr	cx,	4
;PE_0000087C: br.s 0B
	jmp	PE_00000889
PE_0000087E: ;[native] inline
	and	ch,	0x0f
PE_00000889: ;[native] inline
	pop	es
;PE_00000894: [native] get register
;	push	cx	; [optimize] ignore
;PE_00000899: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	cx	; [optimize] add
;PE_0000089A: br.s 00
;	jmp	PE_0000089C	; [optimize] ignore
;PE_0000089C: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000089D: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	2

; void Mona.FDC::ReadSectors(u2, u2, u2)
Mona_FDC__ReadSectors__u2_u2_u2:
	push	bp
	mov	bp,	sp
	sub	sp,	12
;PE_000008AC: [native] inline
	push	es
;PE_000008B7: br 00000099
	jmp	PE_00000955
PE_000008BC: ;ldarg.2
;	push	word [ss:bp+4]	; [optimize] ignore
;PE_000008BE: neg
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp+4]	; [optimize] add
	neg	ax
;	push	ax	; [optimize] ignore
;PE_000008C0: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000008C1: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000008C2: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008C3: sub
;	pop	dx	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
;	mov	dx,	1	; [optimize] add, [optimize] ignore
;	pop	ax	; [optimize] ignore
;	mov	ax,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	sub	ax,	dx	; [optimize] ignore
;	sub	ax,	1	; [optimize] add, [optimize] ignore
;	dec	ax	; [Optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008C5: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
;	mov	word [ss:bp-2],	ax	; [optimize] add, [optimize] ignore
	dec	word [ss:bp-2]	; [optimize] add
;PE_000008C6: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000008C7: ldc.i4.s 09
;	mov	ax,	9	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008C9: shr
;	pop	cx	; [optimize] ignore
;	mov	cx,	ax	; [optimize] add, [optimize] ignore
	mov	cx,	9	; [optimize] add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	shr	ax,	cl
;	push	ax	; [optimize] ignore
;PE_000008CB: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000008CC: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000008CD: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008CE: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008D0: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
;	mov	word [ss:bp-2],	ax	; [optimize] add, [optimize] ignore
;	add	word [ss:bp-2],	1	; [optimize] add, [optimize] ignore
	inc	word [ss:bp-2]	; [Optimize] add
;PE_000008D1: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000008D2: ldarg.1
;	push	word [ss:bp+6]	; [optimize] ignore
;PE_000008D3: ble.s 02
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp+6]	; [optimize] add
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-2]	; [optimize] add
	jnc	PE_000008D7
;PE_000008D5: ldarg.1
	push	word [ss:bp+6]
;PE_000008D6: stloc.0
	pop	word [ss:bp-2]
PE_000008D7: ;br.s 64
	jmp	PE_0000093D
PE_000008D9: ;ldarg.0
;	push	word [ss:bp+8]	; [optimize] ignore
;PE_000008DA: ldc.i4.s 24
;	mov	ax,	36	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008DC: div
;	pop	cx	; [optimize] ignore
;	mov	cx,	ax	; [optimize] add, [optimize] ignore
	mov	cx,	36	; [optimize] add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp+8]	; [optimize] add
	xor	dx,	dx
	div	cx
;	push	ax	; [optimize] ignore
;PE_000008DD: conv.u1
;	pop	ax	; [optimize] ignore
	mov	ah,	0
;	push	ax	; [optimize] ignore
;PE_000008DE: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_000008DF: ldarg.0
;	push	word [ss:bp+8]	; [optimize] ignore
;PE_000008E0: ldc.i4.s 24
;	mov	ax,	36	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008E2: rem
;	pop	cx	; [optimize] ignore
;	mov	cx,	ax	; [optimize] add, [optimize] ignore
	mov	cx,	36	; [optimize] add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp+8]	; [optimize] add
	xor	dx,	dx
	div	cx
;	push	dx	; [optimize] ignore
;PE_000008E3: conv.u1
;	pop	ax	; [optimize] ignore
;	mov	ax,	dx	; [optimize] add, [optimize] ignore
	mov	ah,	0
;	push	ax	; [optimize] ignore
;PE_000008E4: stloc.2
;	pop	word [ss:bp-6]	; [optimize] ignore
;	mov	word [ss:bp-6],	ax	; [optimize] add, [optimize] ignore
	mov	word [ss:bp-6],	dx	; [optimize] add
;PE_000008E5: ldloc.2
;	push	word [ss:bp-6]	; [optimize] ignore
;PE_000008E6: ldc.i4.s 12
;	mov	ax,	18	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008E8: div
;	pop	cx	; [optimize] ignore
;	mov	cx,	ax	; [optimize] add, [optimize] ignore
	mov	cx,	18	; [optimize] add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-6]	; [optimize] add
	xor	dx,	dx
	div	cx
;	push	ax	; [optimize] ignore
;PE_000008E9: conv.u1
;	pop	ax	; [optimize] ignore
	mov	ah,	0
;	push	ax	; [optimize] ignore
;PE_000008EA: stloc.3
;	pop	word [ss:bp-8]	; [optimize] ignore
	mov	word [ss:bp-8],	ax	; [optimize] add
;PE_000008EB: ldloc.2
;	push	word [ss:bp-6]	; [optimize] ignore
;PE_000008EC: ldc.i4.s 12
;	mov	ax,	18	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_000008EE: rem
;	pop	cx	; [optimize] ignore
;	mov	cx,	ax	; [optimize] add, [optimize] ignore
	mov	cx,	18	; [optimize] add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-6]	; [optimize] add
	xor	dx,	dx
	div	cx
;	push	dx	; [optimize] ignore
;PE_000008EF: conv.u1
;	pop	ax	; [optimize] ignore
;	mov	ax,	dx	; [optimize] add, [optimize] ignore
	mov	ah,	0
;	push	ax	; [optimize] ignore
;PE_000008F0: stloc.s 04
;	pop	word [ss:bp-10]	; [optimize] ignore
;	mov	word [ss:bp-10],	ax	; [optimize] add, [optimize] ignore
	mov	word [ss:bp-10],	dx	; [optimize] add
;PE_000008F2: ldc.i4.s 12
	mov	ax,	18
;	push	ax	; [optimize] ignore
;PE_000008F4: ldloc.s 04
;	push	word [ss:bp-10]	; [optimize] ignore
;PE_000008F6: sub
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-10]	; [optimize] add, [optimize] ignore
;	pop	ax	; [optimize] ignore
;	sub	ax,	dx	; [optimize] ignore
	sub	ax,	word [ss:bp-10]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_000008F7: conv.u1
;	pop	ax	; [optimize] ignore
	mov	ah,	0
;	push	ax	; [optimize] ignore
;PE_000008F8: stloc.s 05
;	pop	word [ss:bp-12]	; [optimize] ignore
	mov	word [ss:bp-12],	ax	; [optimize] add
;PE_000008FA: ldloc.s 05
;	push	word [ss:bp-12]	; [optimize] ignore
;PE_000008FC: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000008FD: ble.s 04
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-12]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-12]	; [optimize] add
	jnc	PE_00000903
;PE_000008FF: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000900: conv.u1
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	ah,	0
;	push	ax	; [optimize] ignore
;PE_00000901: stloc.s 05
;	pop	word [ss:bp-12]	; [optimize] ignore
	mov	word [ss:bp-12],	ax	; [optimize] add
PE_00000903: ;ldloc.s 05
	push	word [ss:bp-12]
;PE_00000905: ldarg.2
	push	word [ss:bp+4]
;PE_00000906: ldloc.1
	push	word [ss:bp-4]
;PE_00000907: ldloc.s 04
;	push	word [ss:bp-10]	; [optimize] ignore
;PE_00000909: ldc.i4.1
	mov	ax,	1
;	push	ax	; [optimize] ignore
;PE_0000090A: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-10]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [ss:bp-10]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_0000090B: conv.u1
;	pop	ax	; [optimize] ignore
	mov	ah,	0
	push	ax
;PE_0000090C: ldloc.3
	push	word [ss:bp-8]
;PE_0000090D: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
	push	ax
;PE_0000090E: call 06000013
	call	boolean__Mona_FDC__Read__u1_u2_u1_u1_u1_u1
;	push	ax	; [optimize] ignore
;PE_00000913: brtrue.s 09
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jnz	PE_0000091E
;PE_00000915: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
	push	ax
;PE_00000916: call 06000014
	call	boolean__Mona_FDC__Reset__u1
;	push	ax	; [optimize] ignore
;PE_0000091B: pop
;	pop	ax	; [optimize] ignore
;PE_0000091C: br.s 1F
	jmp	PE_0000093D
PE_0000091E: ;ldarg.2
	push	word [ss:bp+4]
;PE_0000091F: ldloc.s 05
;	push	word [ss:bp-12]	; [optimize] ignore
;PE_00000921: ldc.i4.s 09
;	mov	ax,	9	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000923: shl
;	pop	cx	; [optimize] ignore
;	mov	cx,	ax	; [optimize] add, [optimize] ignore
	mov	cx,	9	; [optimize] add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-12]	; [optimize] add
	shl	ax,	cl
;	push	ax	; [optimize] ignore
;PE_00000925: add
;	pop	ax	; [optimize] ignore
	pop	dx
	add	ax,	dx
;	push	ax	; [optimize] ignore
;PE_00000927: starg.s 02
;	pop	word [ss:bp+4]	; [optimize] ignore
	mov	word [ss:bp+4],	ax	; [optimize] add
;PE_00000929: ldarg.0
;	push	word [ss:bp+8]	; [optimize] ignore
;PE_0000092A: ldloc.s 05
;	push	word [ss:bp-12]	; [optimize] ignore
;PE_0000092C: add
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-12]	; [optimize] add
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp+8]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [ss:bp+8]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_0000092E: starg.s 00
;	pop	word [ss:bp+8]	; [optimize] ignore
	mov	word [ss:bp+8],	ax	; [optimize] add
;PE_00000930: ldarg.1
;	push	word [ss:bp+6]	; [optimize] ignore
;PE_00000931: ldloc.s 05
;	push	word [ss:bp-12]	; [optimize] ignore
;PE_00000933: sub
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-12]	; [optimize] add, [optimize] ignore
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp+6]	; [optimize] add
;	sub	ax,	dx	; [optimize] ignore
	sub	ax,	word [ss:bp-12]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000935: starg.s 01
;	pop	word [ss:bp+6]	; [optimize] ignore
	mov	word [ss:bp+6],	ax	; [optimize] add
;PE_00000937: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000938: ldloc.s 05
;	push	word [ss:bp-12]	; [optimize] ignore
;PE_0000093A: sub
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-12]	; [optimize] add, [optimize] ignore
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
;	sub	ax,	dx	; [optimize] ignore
	sub	ax,	word [ss:bp-12]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_0000093C: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
PE_0000093D: ;ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_0000093E: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_0000093F: bgt.s 98
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp-2]	; [optimize] add
	jc	PE_000008D9
;PE_00000941: [native] get register
;	push	es	; [optimize] ignore
;PE_00000946: ldc.i4 00001000
	mov	ax,	4096
;	push	ax	; [optimize] ignore
;PE_0000094B: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	es	; [optimize] add
	add	ax,	dx
;	push	ax	; [optimize] ignore
;PE_0000094D: [native] set register
;	pop	es	; [optimize] ignore
	mov	es,	ax	; [optimize] add
;PE_00000952: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000953: starg.s 02
;	pop	word [ss:bp+4]	; [optimize] ignore
	mov	word [ss:bp+4],	ax	; [optimize] add
PE_00000955: ;ldarg.1
;	push	word [ss:bp+6]	; [optimize] ignore
;PE_00000956: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000957: bgt FFFFFF60
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp+6]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
	cmp	ax,	word [ss:bp+6]	; [optimize] add
	jc	PE_000008BC
;PE_0000095C: [native] inline
	pop	es
;PE_00000967: ret
	mov	sp,	bp
	pop	bp
	ret	6

; boolean Mona.FDC::Read(u1, u2, u1, u1, u1, u1)
boolean__Mona_FDC__Read__u1_u2_u1_u1_u1_u1:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_00000974: [native] set register
	mov	ah,	2
;PE_0000097A: [native] set register
	mov	al,	[ss:bp+14]
;PE_00000980: [native] set register
	mov	bx,	[ss:bp+12]
;PE_00000986: [native] set register
	mov	ch,	[ss:bp+10]
;PE_0000098C: [native] set register
	mov	cl,	[ss:bp+8]
;PE_00000992: [native] set register
	mov	dh,	[ss:bp+6]
;PE_00000999: [native] set register
	mov	dl,	[ss:bp+4]
;PE_000009A0: [native] inline
	int	0x13
;PE_000009AB: [native] get flag
	jnc	NM_00000004
	xor	ax,	ax
	jmp	NM_00000005
NM_00000004: ;[native] get flag internal
	mov	ax,	1
NM_00000005: ;[native] get flag internal
;	push	ax	; [optimize] ignore
;PE_000009B0: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000009B1: br.s 00
;	jmp	PE_000009B3	; [optimize] ignore
;PE_000009B3: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000009B4: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	12

; boolean Mona.FDC::Reset(u1)
boolean__Mona_FDC__Reset__u1:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_000009C4: [native] set register
	mov	ah,	0
;PE_000009CA: [native] set register
	mov	dl,	[ss:bp+4]
;PE_000009D0: [native] inline
	int	0x13
;PE_000009DB: [native] get flag
	jnc	NM_00000006
	xor	ax,	ax
	jmp	NM_00000007
NM_00000006: ;[native] get flag internal
	mov	ax,	1
NM_00000007: ;[native] get flag internal
;	push	ax	; [optimize] ignore
;PE_000009E0: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000009E1: br.s 00
;	jmp	PE_000009E3	; [optimize] ignore
;PE_000009E3: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_000009E4: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	2

; string Mona.FDC::ConvertFileName(string)
string__Mona_FDC__ConvertFileName__string:
	push	bp
	mov	bp,	sp
	sub	sp,	10
;PE_000009F4: ldarg.0
	push	word [ss:bp+4]
;PE_000009F5: call 06000009
	call	u2__Mona_Str__GetLength__string
;	push	ax	; [optimize] ignore
;PE_000009FA: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_000009FB: ldarg.0
;	push	word [ss:bp+4]	; [optimize] ignore
;PE_00000A01: ldc.i4.1
	mov	ax,	1
;	push	ax	; [optimize] ignore
;PE_00000A02: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp+4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [ss:bp+4]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000A04: [native] set register
;	pop	si	; [optimize] ignore
	mov	si,	ax	; [optimize] add
;PE_00000A09: ldsfld 0400000C
;	push	word [cs:Mona_FDC__buffer]	; [optimize] ignore
;PE_00000A13: ldc.i4.1
	mov	ax,	1
;	push	ax	; [optimize] ignore
;PE_00000A14: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [cs:Mona_FDC__buffer]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [cs:Mona_FDC__buffer]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000A16: [native] set register
;	pop	di	; [optimize] ignore
	mov	di,	ax	; [optimize] add
;PE_00000A1B: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000A1C: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_00000A1D: br.s 1D
	jmp	PE_00000A3C
PE_00000A1F: ;[native] inline
	mov	byte [cs:di],	' '
;PE_00000A2A: [native] get register
;	push	di	; [optimize] ignore
;PE_00000A2F: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000A30: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	di	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	di	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000A32: [native] set register
;	pop	di	; [optimize] ignore
;	mov	di,	ax	; [optimize] add, [optimize] ignore
;	add	di,	1	; [optimize] add, [optimize] ignore
	inc	di	; [Optimize] add
;PE_00000A37: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000A38: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000A39: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000A3B: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
;	add	word [ss:bp-4],	1	; [optimize] add, [optimize] ignore
	inc	word [ss:bp-4]	; [Optimize] add
PE_00000A3C: ;ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000A3D: ldc.i4.s 0B
;	mov	ax,	11	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000A3F: blt.s DE
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	cmp	dx,	ax	; [optimize] ignore
;	cmp	dx,	11	; [optimize] add, [optimize] ignore
	cmp	word [ss:bp-4],	11	; [optimize] add
	jc	PE_00000A1F
;PE_00000A41: ldsfld 0400000C
;	push	word [cs:Mona_FDC__buffer]	; [optimize] ignore
;PE_00000A4B: ldc.i4.1
	mov	ax,	1
;	push	ax	; [optimize] ignore
;PE_00000A4C: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [cs:Mona_FDC__buffer]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [cs:Mona_FDC__buffer]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000A4E: [native] set register
;	pop	di	; [optimize] ignore
	mov	di,	ax	; [optimize] add
;PE_00000A53: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000A54: stloc.2
;	pop	word [ss:bp-6]	; [optimize] ignore
	mov	word [ss:bp-6],	ax	; [optimize] add
;PE_00000A55: br.s 5B
	jmp	PE_00000AB2
PE_00000A57: ;[native] inline
	mov	al,	[cs:si]
;PE_00000A62: [native] set register
	mov	ah,	0
;PE_00000A68: [native] get register
;	push	si	; [optimize] ignore
;PE_00000A6D: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000A6E: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	si	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	si	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000A70: [native] set register
;	pop	si	; [optimize] ignore
;	mov	si,	ax	; [optimize] add, [optimize] ignore
;	add	si,	1	; [optimize] add, [optimize] ignore
	inc	si	; [Optimize] add
;PE_00000A75: [native] get register
;	push	ax	; [optimize] ignore
;PE_00000A7A: stloc.3
;	pop	word [ss:bp-8]	; [optimize] ignore
	mov	word [ss:bp-8],	ax	; [optimize] add
;PE_00000A7B: ldloc.3
;	push	word [ss:bp-8]	; [optimize] ignore
;PE_00000A7C: ldc.i4.s 2E
;	mov	ax,	46	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000A7E: bne.un.s 15
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-8]	; [optimize] add, [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
;	cmp	ax,	word [ss:bp-8]	; [optimize] add, [optimize] ignore
	cmp	word [ss:bp-8],	46	; [optimize] add
	jne	PE_00000A95
;PE_00000A80: ldsfld 0400000C
;	push	word [cs:Mona_FDC__buffer]	; [optimize] ignore
;PE_00000A8A: ldc.i4.s 09
	mov	ax,	9
;	push	ax	; [optimize] ignore
;PE_00000A8C: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [cs:Mona_FDC__buffer]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
	add	ax,	word [cs:Mona_FDC__buffer]	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000A8E: [native] set register
;	pop	di	; [optimize] ignore
	mov	di,	ax	; [optimize] add
;PE_00000A93: br.s 18
	jmp	PE_00000AAD
PE_00000A95: ;[native] inline
	mov	[cs:di],	al
;PE_00000AA0: [native] get register
;	push	di	; [optimize] ignore
;PE_00000AA5: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000AA6: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	di	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	di	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000AA8: [native] set register
;	pop	di	; [optimize] ignore
;	mov	di,	ax	; [optimize] add, [optimize] ignore
;	add	di,	1	; [optimize] add, [optimize] ignore
	inc	di	; [Optimize] add
PE_00000AAD: ;ldloc.2
;	push	word [ss:bp-6]	; [optimize] ignore
;PE_00000AAE: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000AAF: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-6]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-6]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000AB1: stloc.2
;	pop	word [ss:bp-6]	; [optimize] ignore
;	mov	word [ss:bp-6],	ax	; [optimize] add, [optimize] ignore
	add	word [ss:bp-6],	1	; [optimize] add
PE_00000AB2: ;ldloc.2
;	push	word [ss:bp-6]	; [optimize] ignore
;PE_00000AB3: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000AB4: blt.s A1
;	pop	ax	; [optimize] ignore
;	mov	ax,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	word [ss:bp-6]	; [optimize] add
;	cmp	dx,	ax	; [optimize] ignore
	cmp	dx,	word [ss:bp-2]	; [optimize] add
	jc	PE_00000A57
;PE_00000AB6: ldsfld 0400000C
	push	word [cs:Mona_FDC__buffer]
;PE_00000ABB: stloc.s 04
	pop	word [ss:bp-10]
;PE_00000ABD: br.s 00
;	jmp	PE_00000ABF	; [optimize] ignore
;PE_00000ABF: ldloc.s 04
;	push	word [ss:bp-10]	; [optimize] ignore
;PE_00000AC1: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-10]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	2

; void Mona.FDC::.cctor()
Mona_FDC___cctor:
;PE_00000AD0: ldstr 700003F5
	mov	ax,	US_000003F5
;	push	ax	; [optimize] ignore
;PE_00000AD5: stsfld 0400000C
;	pop	word [cs:Mona_FDC__buffer]	; [optimize] ignore
	mov	word [cs:Mona_FDC__buffer],	ax	; [optimize] add
;PE_00000ADA: ret
	ret

; class Mona.VESA

Mona_VESA__Resolution dw 0
Mona_VESA__Bpp dw 0

; boolean Mona.VESA::TryMode(u2, u2, u2)
boolean__Mona_VESA__TryMode__u2_u2_u2:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_00000AFC: ldarg.0
;	push	word [ss:bp+8]	; [optimize] ignore
;PE_00000AFD: ldc.i4 00004000
	mov	ax,	16384
;	push	ax	; [optimize] ignore
;PE_00000B02: or
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp+8]	; [optimize] add, [optimize] ignore
;	or	ax,	dx	; [optimize] ignore
	or	ax,	word [ss:bp+8]	; [optimize] add
	push	ax
;PE_00000B04: call 06000019
	call	boolean__Mona_VESA__SetMode__u2
;	push	ax	; [optimize] ignore
;PE_00000B09: brtrue.s 04
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jnz	PE_00000B0F
;PE_00000B0B: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000B0C: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000B0D: br.s 1D
	jmp	PE_00000B2C
PE_00000B0F: ;ldarg.1
	push	word [ss:bp+6]
;PE_00000B10: call 0600001A
	call	boolean__Mona_VESA__GetInfo__u2
;	push	ax	; [optimize] ignore
;PE_00000B15: brtrue.s 04
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jnz	PE_00000B1B
;PE_00000B17: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000B18: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000B19: br.s 11
	jmp	PE_00000B2C
PE_00000B1B: ;ldarg.0
	push	word [ss:bp+8]
;PE_00000B1C: ldarg.2
	push	word [ss:bp+4]
;PE_00000B1D: call 0600001B
	call	boolean__Mona_VESA__GetInfoDetails__u2_u2
;	push	ax	; [optimize] ignore
;PE_00000B22: brtrue.s 04
;	pop	ax	; [optimize] ignore
	or	ax,	ax
	jnz	PE_00000B28
;PE_00000B24: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000B25: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000B26: br.s 04
	jmp	PE_00000B2C
PE_00000B28: ;ldc.i4.1
	mov	ax,	1
;	push	ax	; [optimize] ignore
;PE_00000B29: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000B2A: br.s 00
;	jmp	PE_00000B2C	; [optimize] ignore
PE_00000B2C: ;ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000B2D: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	6

; boolean Mona.VESA::SetMode(u2)
boolean__Mona_VESA__SetMode__u2:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_00000B3C: [native] set register
	mov	ax,	20226
;PE_00000B46: [native] set register
	mov	bx,	[ss:bp+4]
;PE_00000B4C: [native] inline
	int	0x10
;PE_00000B57: [native] get register
;	push	ax	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
;PE_00000B5C: ldc.i4.s 4F
;	mov	ax,	79	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000B5E: ceq
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
;	cmp	dx,	79	; [optimize] add, [optimize] ignore
	cmp	ax,	79	; [optimize] add
	je	NM_00000008
	xor	ax,	ax
	jmp	NM_00000009
NM_00000008: ;ceq internal
	mov	ax,	1
NM_00000009: ;ceq internal
;	push	ax	; [optimize] ignore
;PE_00000B60: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000B61: br.s 00
;	jmp	PE_00000B63	; [optimize] ignore
;PE_00000B63: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000B64: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	2

; boolean Mona.VESA::GetInfo(u2)
boolean__Mona_VESA__GetInfo__u2:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_00000B74: [native] set register
	mov	ax,	20224
;PE_00000B7E: [native] set register
	mov	di,	[ss:bp+4]
;PE_00000B84: [native] inline
	int	0x10
;PE_00000B8F: [native] get register
;	push	ax	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
;PE_00000B94: ldc.i4.s 4F
;	mov	ax,	79	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000B96: ceq
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
;	cmp	dx,	79	; [optimize] add, [optimize] ignore
	cmp	ax,	79	; [optimize] add
	je	NM_0000000A
	xor	ax,	ax
	jmp	NM_0000000B
NM_0000000A: ;ceq internal
	mov	ax,	1
NM_0000000B: ;ceq internal
;	push	ax	; [optimize] ignore
;PE_00000B98: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000B99: br.s 00
;	jmp	PE_00000B9B	; [optimize] ignore
;PE_00000B9B: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000B9C: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	2

; boolean Mona.VESA::GetInfoDetails(u2, u2)
boolean__Mona_VESA__GetInfoDetails__u2_u2:
	push	bp
	mov	bp,	sp
	sub	sp,	2
;PE_00000BAC: [native] set register
	mov	ax,	20225
;PE_00000BB6: [native] set register
	mov	cx,	[ss:bp+6]
;PE_00000BBC: [native] set register
	mov	di,	[ss:bp+4]
;PE_00000BC2: [native] inline
	int	0x10
;PE_00000BCD: [native] get register
;	push	ax	; [optimize] ignore
;	mov	dx,	ax	; [optimize] add, [optimize] ignore
;PE_00000BD2: ldc.i4.s 4F
;	mov	ax,	79	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000BD4: ceq
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	cmp	ax,	dx	; [optimize] ignore
;	cmp	dx,	79	; [optimize] add, [optimize] ignore
	cmp	ax,	79	; [optimize] add
	je	NM_0000000C
	xor	ax,	ax
	jmp	NM_0000000D
NM_0000000C: ;ceq internal
	mov	ax,	1
NM_0000000D: ;ceq internal
;	push	ax	; [optimize] ignore
;PE_00000BD6: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000BD7: br.s 00
;	jmp	PE_00000BD9	; [optimize] ignore
;PE_00000BD9: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000BDA: ret
;	pop	ax	; [optimize] ignore
	mov	ax,	word [ss:bp-2]	; [optimize] add
	mov	sp,	bp
	pop	bp
	ret	4

; void Mona.VESA::SetVGA()
Mona_VESA__SetVGA:
;PE_00000BE8: [native] set register
	mov	ax,	18
;PE_00000BEF: [native] inline
	int	0x10
;PE_00000BFA: ret
	ret

; void Mona.VESA::.cctor()
Mona_VESA___cctor:
;PE_00000C08: ldc.i4 00000320
	mov	ax,	800
;	push	ax	; [optimize] ignore
;PE_00000C0D: stsfld 04000010
;	pop	word [cs:Mona_VESA__Resolution]	; [optimize] ignore
	mov	word [cs:Mona_VESA__Resolution],	ax	; [optimize] add
;PE_00000C12: ldc.i4.s 20
	mov	ax,	32
;	push	ax	; [optimize] ignore
;PE_00000C14: stsfld 04000011
;	pop	word [cs:Mona_VESA__Bpp]	; [optimize] ignore
	mov	word [cs:Mona_VESA__Bpp],	ax	; [optimize] add
;PE_00000C19: ret
	ret

; class Mona.Console

; void Mona.Console::Write(char)
Mona_Console__Write__char:
	push	bp
	mov	bp,	sp
;PE_00000C3C: [native] set register
	mov	ax,	[ss:bp+4]
;PE_00000C42: [native] set register
	mov	ah,	14
;PE_00000C49: [native] set register
;	mov	bx,	0	; [optimize] ignore
	xor	bx,	bx	; [optimize] add
;PE_00000C4F: [native] inline
	int	0x10
;PE_00000C5A: ret
	pop	bp
	ret	2

; void Mona.Console::Write(string)
Mona_Console__Write__string:
	push	bp
	mov	bp,	sp
	sub	sp,	4
;PE_00000C68: ldarg.0
;	push	word [ss:bp+4]	; [optimize] ignore
;PE_00000C6E: [native] set register
;	pop	si	; [optimize] ignore
	mov	si,	word [ss:bp+4]	; [optimize] add
;PE_00000C73: [native] inline
	cs	lodsb
;PE_00000C7E: [native] set register
	mov	ah,	0
;PE_00000C84: [native] get register
;	push	ax	; [optimize] ignore
;PE_00000C89: stloc.0
;	pop	word [ss:bp-2]	; [optimize] ignore
	mov	word [ss:bp-2],	ax	; [optimize] add
;PE_00000C8A: ldc.i4.0
;	mov	ax,	0	; [optimize] ignore
	xor	ax,	ax	; [optimize] add
;	push	ax	; [optimize] ignore
;PE_00000C8B: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
	mov	word [ss:bp-4],	ax	; [optimize] add
;PE_00000C8C: br.s 27
	jmp	PE_00000CB5
PE_00000C8E: ;[native] inline
	cs	lodsb
;PE_00000C99: [native] set register
	mov	ah,	14
;PE_00000CA0: [native] set register
;	mov	bx,	0	; [optimize] ignore
	xor	bx,	bx	; [optimize] add
;PE_00000CA6: [native] inline
	int	0x10
;PE_00000CB1: ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000CB2: ldc.i4.1
;	mov	ax,	1	; [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000CB3: add
;	pop	ax	; [optimize] ignore
;	pop	dx	; [optimize] ignore
;	mov	dx,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	add	ax,	dx	; [optimize] ignore
;	add	ax,	word [ss:bp-4]	; [optimize] add, [optimize] ignore
;	push	ax	; [optimize] ignore
;PE_00000CB4: stloc.1
;	pop	word [ss:bp-4]	; [optimize] ignore
;	mov	word [ss:bp-4],	ax	; [optimize] add, [optimize] ignore
;	add	word [ss:bp-4],	1	; [optimize] add, [optimize] ignore
	inc	word [ss:bp-4]	; [Optimize] add
PE_00000CB5: ;ldloc.1
;	push	word [ss:bp-4]	; [optimize] ignore
;PE_00000CB6: ldloc.0
;	push	word [ss:bp-2]	; [optimize] ignore
;PE_00000CB7: blt.s D5
;	pop	ax	; [optimize] ignore
;	mov	ax,	word [ss:bp-2]	; [optimize] add, [optimize] ignore
;	pop	dx	; [optimize] ignore
	mov	dx,	word [ss:bp-4]	; [optimize] add
;	cmp	dx,	ax	; [optimize] ignore
	cmp	dx,	word [ss:bp-2]	; [optimize] add
	jc	PE_00000C8E
;PE_00000CB9: ret
	mov	sp,	bp
	pop	bp
	ret	2

; void Mona.Console::WriteLine()
Mona_Console__WriteLine:
;PE_00000CC8: ldstr 70000431
	mov	ax,	US_00000431
	push	ax
;PE_00000CCD: call 06000020
	call	Mona_Console__Write__string
;PE_00000CD2: ret
	ret

; void Mona.Console::WriteLine(string)
Mona_Console__WriteLine__string:
	push	bp
	mov	bp,	sp
;PE_00000CE0: ldarg.0
	push	word [ss:bp+4]
;PE_00000CE1: call 06000020
	call	Mona_Console__Write__string
;PE_00000CE6: call 06000021
	call	Mona_Console__WriteLine
;PE_00000CEB: ret
	pop	bp
	ret	2

US_00000001 db 5, "/\ /\", 0x00
US_0000000D db 23, " 'V `) < Booting MONA!!", 0x00
US_00000045 db 10, "KERNEL.BIN", 0x00
US_0000005B db 8, "FILE.BIN", 0x00
US_0000006D db 11, "PROCESS.BIN", 0x00
US_00000085 db 11, "MONITOR.BIN", 0x00
US_0000009D db 8, "MONA.CFG", 0x00
US_000000AF db 14, "Boot failure!!", 0x00
US_000000CD db 18, "System has halted.", 0x00
US_000000FB db 33, "Default settings will be applied.", 0x00
US_00000183 db 16, "VESA_RESOLUTION=", 0x00
US_000001A5 db 9, "VESA_BPP=", 0x00
US_00000219 db 8, "Reading ", 0x00
US_0000022B db 20, "ERROR: can not find!", 0x00
US_00000265 db 1, ".", 0x00
US_000003F5 db 11, "           ", 0x00
US_00000431 db 2, 0x0d, 0x0a, 0x00

; --- BEGIN: secondboot32.asm

%define KERNEL_SEG 0x0100

;-------------------------------------------------------------------------------
; entry point
;-------------------------------------------------------------------------------

SecondBootMain:
        call    ILMain

        mov     ax, cs
        mov     ds, ax
        mov     si, RealToProtect
        mov     ax, KERNEL_SEG
        mov     es, ax
        xor     di, di
        mov     cx, end_second - RealToProtect
        rep     movsb

        jmp     KERNEL_SEG:0

;-------------------------------------------------------------------------------
; To Protect mode
;-------------------------------------------------------------------------------
RealToProtect:
;;; Real to Protect
        mov     ax, cs          ; we jump from firstboot
        mov     ds, ax          ; so ds is changed
        lgdt    [gdtr - RealToProtect]  ; load gdtr
        cli                     ; disable interrupt
        mov     eax, cr0        ; real
        or      eax, 1          ; to
        mov     cr0, eax        ; protect
        jmp     flush_q1

;-------------------------------------------------------------------------------
; GDT definition: It is temporary.
;-------------------------------------------------------------------------------
gdtr:
        dw gdt_end - gdt0 - 1   ; gdt limit
        dd gdt0 - RealToProtect + 0x100 * 16  ; start adderess

gdt0:                           ; segment 00
        dw 0                    ; segment limitL
        dw 0                    ; segment baseL
        db 0                    ; segment baseM
        db 0                    ; segment type
        db 0                    ; segment limitH
        db 0                    ; segment baseH

gdt08:                          ; segment 08(code segment)
        dw 0xffff               ; segment limitL
        dw 0                    ; segment baseL
        db 0                    ; segment baseM
        db 0x9a                 ; Type Code
        db 0xff                 ; segment limitH
        db 0                    ; segment baseH

gdt10:                          ; segment 10(data segment)
        dw 0xffff               ; segment limitL
        dw 0                    ; segment baseL
        db 0                    ; segment baseM
        db 0x92                 ; Type Data
        db 0xff                 ; segment limitH
        db 0                    ; segment baseH

gdt18:                          ; segment 18(stack segment)
        dw 0                    ; segment limitL
        dw 0                    ; segment baseL
        db 0                    ; segment baseM
        db 0x96                 ; Type Stack
        db 0xC0                 ; segment limitH
        db 0                    ; segment baseH

gdt_end:                        ; end of gdt

[bits 32]
flush_q1:
        db 0eah
        dw set_cs_desc1 - RealToProtect + 0x100 * 16
        dw 08h

set_cs_desc1:
        mov     ax, 0x10        ; ds & es
        mov     ds, ax          ; selector is
        mov     es, ax          ; 0x10
        mov     ax, 0x18        ; ss selector
        mov     ss, ax          ; is 0x18
        mov     esp, 0x80000    ; sp is 3MB
        push    eax
jump_to_kernel:
        jmp     $ + 0x0200 - (jump_to_kernel - RealToProtect)

end_second

; --- END
