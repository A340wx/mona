(define mona-gui-auto-start #f)

;; prompt string
(define (mona-prompt-string)
  (string-append "mona:"
                 (fs-path (fs-current-directory))
                 ">"))

(define greeting-cont '())

(define (greeting)
  (print "Hello, I'm")
  (if (= 1 (call/cc (lambda (c) (set! greeting-cont c) 0)))
      (print "Higepon")
      (mona-timer-add greeting-cont 3000)
))


(define (mona-lisa)
  (start-process "/APPS/MONAFRMS/BITMAP.EX5 /APPS/MONAFRMS/MONALISA.JPG"))

(define (squirrel)
  (start-process "/APPS/BAYGUI/MONASQ.EX5"))

(define (bplayer)
  (start-process "/APPS/BAYGUI/BPLAYER.EX5"))

(define (a)
  (start-process "/APPS/AUDIO.EX5"))

(define (h)
  (start-process "/APPS/HELLO.EX5"))

(define-syntax aif
  (syntax-rules ()
    ((_ it a b c ...)
     (let ((it a)) (if it b c ...)))))

(define (w)
  (aif it (find (lambda (window) (string=? (mona-gui-get-window-title window) "GUI Shell"))
                (mona-gui-enum-windows))
       (mona-gui-move-window it 50 100)
       #f))

(define (wm1)
  (aif it (find (lambda (window) (string=? (mona-gui-get-window-title window) "GUI Shell"))
                (mona-gui-enum-windows))
       (let loop ((x 1) (y 1))
         (cond ((< x 300)
                (begin
                  (mona-gui-move-window it x y)
                  (pause)
                  (loop (+ x 10) y)))
               ((< y 300)
                (begin
                  (mona-gui-move-window it x y)
                  (pause)
                  (loop x (+ 10 y))))
               (else #f)))
       #f))

(define (wm2)
  (aif it (find (lambda (window) (string=? (mona-gui-get-window-title window) "/APPS"))
                (mona-gui-enum-windows))
       (let loop ((x 1) (y 1))
         (cond ((< x 300)
                (begin
                  (mona-gui-move-window it x y)
                  (pause)
                  (loop (+ x 10) y)))
               ((< y 300)
                (begin
                  (mona-gui-move-window it x y)
                  (pause)
                  (loop x (+ 10 y))))
               (else #f)))
       #f))


(define queue (cons '() '()))

(define (enqueue! process)
  (if (null? (car queue))
      (set-car! queue process)
      (set-cdr! queue process)))

(define (dequeue!)
  (let ((p (cdr queue)))
    (set-cdr! queue (car queue))
    (set-car! queue '())
    p))

(define (coroutine process)
  (enqueue! process))

(define (start)
  (let ((process (dequeue!)))
    (if (null? process)
        'end
        (process))))

(define (pause)
  (call/cc (lambda (c)
             (mona-sleep 500)
             (coroutine (lambda () (c #f)))
             (start))))

(coroutine wm1)
(coroutine wm2)

(define queue (cons '() '()))

(define (enqueue! process)
  (if (null? (car queue))
      (set-car! queue process)
      (set-cdr! queue process)))

(define (dequeue!)
  (let ((p (cdr queue)))
    (set-cdr! queue (car queue))
    (set-car! queue '())
    p))

(define (coroutine process)
  (enqueue! process))

(define (start)
  (let ((process (dequeue!)))
    (if (null? process)
        'end
        (process))))

(define (pause)
  (call/cc (lambda (c)
             (coroutine (lambda () (c #f)))
             (start))))

(coroutine (lambda ()
               (let loop ((i 0))
                 (if (< i 10)
                     (begin
                       (print i)
                       (pause)
                       (loop (+ 1 i)))
                     #f))))

(coroutine (lambda ()
               (let loop ((i 10))
                 (if (< i 20)
                     (begin
                       (print i)
                       (pause)
                       (loop (+ 1 i)))
                     #f))))


(gui)
