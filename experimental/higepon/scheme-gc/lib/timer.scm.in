;; Begin: mona-timer dependent
(define (mona-timer-make-timer cont ms)
  (cons cont ms))

(define (mona-timer-cont timer)
  (car timer))

(define (mona-timer-ms timer)
  (cdr timer))

(define (mona-timer-decrement timer . ms)
  (let ((dec-ms (if (null? ms) 100 (car ms))))
    (set-cdr! timer (- (mona-timer-ms timer) dec-ms))))

;; End: mona-timer dependent

(define mona-timer-list '())

(define (mona-timer-add cont ms)
  (set! mona-timer-list (append mona-timer-list (cons (mona-timer-make-timer cont ms) '()))))

(define (mona-timer-iteration)
  (map mona-timer-decrement mona-timer-list)
  (let ((timer-list (filter (lambda (timer) (<= (mona-timer-ms timer) 0)) mona-timer-list))
        (next-list (filter (lambda (timer) (> (mona-timer-ms timer) 0)) mona-timer-list)))
    (set! mona-timer-list next-list)
    (for-each (lambda (timer) ((mona-timer-cont timer) 1)) timer-list)))

(define (mona-timer-init)
  (set! mona-timer-list '()))



