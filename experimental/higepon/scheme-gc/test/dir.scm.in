(load "<LIBDIR>/scheme.scm")
(load "<LIBDIR>/unittest.scm")
;; (use slib)
;; (use util.list)
;; (require 'trace)

;; 構造に依存する部分
(define (fs-new-directory name)
  (cons name (cons '() '())))

(define (fs-new-file name)
  (cons name (cons '() #f)))

(define (fs-name entry)
  (car entry))

(define (fs-directory? entry)
  (not (fs-file? entry)))

(define (fs-file? entry)
  (not (cddr entry)))

(define (fs-entries directory)
  (cddr directory))

(define (fs-set-parent directory parent)
  (set-car! (cdr directory) parent)
)

(define (fs-parent directory)
  (cadr directory))

(define (fs-add-entry directory entry)
  (let ((entries (fs-entries directory)))
    (fs-set-parent entry directory)
    (if (null? entries)
        (set-cdr! (cdr directory) (cons entry '()))
        (set-cdr! (cdr directory) (cons entry entries)))
    directory))

(define (fs-has-child directory name)
  (cond ((string=? name ".") directory)
        ((string=? name "..") (fs-parent directory))
        (else (assoc name (fs-entries directory)))))

(define (fs-path entry)
  (let ((parent (fs-parent entry)))
    (if (null? parent) (string-append (fs-name entry))
        (string-append (if (string=? (fs-path parent) "/") "" (fs-path parent)) "/" (fs-name entry))))
)


;; ここまで

(define (fs-print root)
  (define (fs-print-iter directory space)
    (for-each
     (lambda (e) (display space) (print (fs-name e)) (if (fs-directory? e) (fs-print-iter e (string-append space " "))))
     (fs-entries directory)))
  (fs-print-iter root " "))


(define test-dir (fs-new-directory "test"))
(fs-add-entry test-dir (fs-new-file "test.scm"))
(define servers-dir (fs-new-directory "servers"))
(fs-add-entry servers-dir test-dir)
(fs-add-entry servers-dir (fs-new-file "hoge"))

(define root-dir (fs-new-directory "/"))
(fs-add-entry root-dir servers-dir)

(fs-add-entry root-dir (fs-new-directory "applications"))


;(trace fs-has-child)

(assert-check-true "fs-has-child"
                   (fs-has-child root-dir "servers")
                   (fs-has-child root-dir ".")
                   (fs-has-child root-dir "applications")
                   (let ((servers-dir (fs-has-child root-dir "servers")))
                     (and (fs-directory? servers-dir)
                     (fs-has-child servers-dir "test")))
)

(assert-check-false "fs-has-child"
                   (fs-has-child root-dir "server")
                   (fs-has-child root-dir "application")
)

;; ここで .. // ..の処理をすべし
(define (fs-find-entry dir paths)
  (cond ((and dir (null? (cdr paths))) (fs-has-child dir (car paths)))
        (dir (fs-find-entry (fs-has-child dir (car paths)) (cdr paths)))
        (else #f)))

(assert-check-true "fs-find-entry"
                   (fs-find-entry root-dir '("servers"))
                   (fs-find-entry root-dir '("." "servers"))
                   (fs-find-entry root-dir '("servers" "test"))
                   (fs-find-entry root-dir '("servers" "test" "test.scm"))
                   (fs-find-entry root-dir '("applications"))
                   (let ((servers-dir (fs-find-entry root-dir '("servers"))))
                     (fs-find-entry servers-dir '("test")))
                   (let ((servers-dir (fs-find-entry root-dir '("servers"))))
                     (fs-directory?(fs-find-entry servers-dir '("test"))))
                   (let ((servers-dir (fs-find-entry root-dir '("servers"))))
                     (fs-directory?(fs-find-entry servers-dir '(".." "servers" "test"))))

)

(assert-check-false "fsfind-entry false"
                   (fs-find-entry root-dir '("server"))
                   (fs-find-entry root-dir '("servers" "tes"))
;                   (trace fs-find-entry)
                   (fs-find-entry root-dir '("server" "tes"))
)

(define (fs-start-with-slash? path)
  (and (> (string-length path) 0) (char=? (string-ref path 0) #\/)))

(define current-directory servers-dir)

(define (fs-find path)
  (let ((paths (string-split path #\/)))
    (if (fs-start-with-slash? path)
        (if (= 1 (string-length path))
            root-dir ; "/" always exist
            (fs-find-entry root-dir (cdr paths)))
        (fs-find-entry current-directory paths))))

(assert-check-true "fs-find OK"
                   (fs-find "/servers/test")
                   (fs-find "/servers")
                   (fs-find "/servers/test/test.scm")
                   (fs-find "/")
                   (fs-find "test")
                   (fs-find "./test")
                   (fs-find "test/test.scm")
                   (fs-find "./test/test.scm")
                   (fs-find "./test/./test.scm")
                   (fs-find "../servers/test/./test.scm")
                   (fs-find "../servers/../servers/test/./test.scm")
)

(assert-check-false "fs-find NG"
                   (fs-find "/servers/tes")
                   (fs-find "/server")
                   (fs-find "/serves/tes")
                   (fs-find "tes")
)



;(trace fs-path)

(define (test-path path)
  (string=? (fs-path (fs-find path)) path)
)

(assert-check-true "fs-find OK"
                   (test-path "/servers/test")
                   (test-path "/servers")
                   (test-path "/servers/test/test.scm")
                   (test-path "/")
)

(define (fs-find-generic proc path)
  (let ((entry (fs-find path)))
    (and entry (proc entry) entry)))

(define (fs-find-file path)
  (fs-find-generic fs-file? path))

(define (fs-find-directory path)
  (fs-find-generic fs-directory? path))

(define (fs-current-directory)
  current-directory
)

(define (fs-change-directory path)
  (let ((directory (fs-find-directory path)))
    (if directory
        (begin (set! current-directory directory) directory)
        #f))
)

(assert-check-true "change-directory"
                   (fs-change-directory "/")
                   (string=? "/" (fs-path (fs-current-directory)))
                   (fs-change-directory "/servers")
                   (string=? "/servers" (fs-path (fs-current-directory)))
                   (fs-change-directory "/servers/test")
                   (string=? "/servers/test" (fs-path (fs-current-directory)))
)

(assert-check-false "change-directory NG"
                   (fs-change-directory "/server")
                   (fs-change-directory "/servers/test/test.scm")
)

(define (fs-io-enum-directory-entries path)
  (define (create-fs-entry entry)
    (if (cdr entry)
        (fs-new-directory (car entry))
        (fs-new-file (car entry))))
  (let ((d (mona-dir-open path)))
    (let loop ((entry (mona-dir-read d)) (entries '()))
      (if entry
          (loop (mona-dir-read d)
                (cons (create-fs-entry entry) entries))
          (begin (mona-dir-close d) entries)))))

(let ((directories (fs-io-enum-directory-entries "/home/taro/mona/bin")))
  (assert-check-true "fs-io-enum-directory-entries"
                     (find (lambda (d) (string=? "APPS" (fs-name d))) directories)
                     (find (lambda (d) (string=? "SERVERS" (fs-name d))) directories)
                     ))

(define (fs-create-tree root path)
  (for-each
     (lambda (e)
       (fs-add-entry root e)
       (if (fs-directory? e)
           (fs-create-tree e (string-append path "/" (fs-name e)))))
     (remove (lambda (e) (or (string=? (fs-name e) ".") (string=? (fs-name e) "..")))
             (fs-io-enum-directory-entries path))))

(define root-dir2 (fs-new-directory "/"))

(fs-create-tree root-dir2 "/home/taro/mona/bin")

;(fs-print root-dir2)

(set! current-directory root-dir2)
(set! root-dir root-dir2)

(assert-check-true "fs-create-tree"
                   (fs-find "/SERVERS")
                   (fs-find "/SERVERS/TEST")
                   (fs-find "/SERVERS/TEST/test.scm")
                   (fs-change-directory "/")
                   (string=? "/" (fs-path (fs-current-directory)))
                   (fs-change-directory "/SERVERS")
                   (string=? "/SERVERS" (fs-path (fs-current-directory)))
                   (fs-change-directory "/SERVERS/TEST")
                   (string=? "/SERVERS/TEST" (fs-path (fs-current-directory)))
)

;(fs-print root-dir2)

;(fs-print (fs-find "SERVERS/TEST"))
;; (if (fs-find "/SERVERS")
;;     (print "found")
;;     (print "not found "))
(total-report)
