env->defineVariable(new Variable("char?"), new CharcterP());
env->defineVariable(new Variable("char=?"), new CharcterEqualP());
env->defineVariable(new Variable("char>?"), new CharcterGtP());
env->defineVariable(new Variable("char<?"), new CharcterLtP());
env->defineVariable(new Variable("char>=?"), new CharcterGeP());
env->defineVariable(new Variable("char<=?"), new CharcterLeP());
env->defineVariable(new Variable("char->integer"), new CharcterToInteger());
env->defineVariable(new Variable("integer->char"), new IntegerToCharcter());
env->defineVariable(new Variable("eqv?"), new EqvP());
env->defineVariable(new Variable("eq?"), new EqP());
env->defineVariable(new Variable("mona-dir-open"), new MonaDirOpen());
env->defineVariable(new Variable("mona-dir-read"), new MonaDirRead());
env->defineVariable(new Variable("mona-dir-close"), new MonaDirClose());
env->defineVariable(new Variable("transcript-on"), new TranscriptOn());
env->defineVariable(new Variable("transcript-off"), new TranscriptOff());
env->defineVariable(new Variable("file-exists?"), new FileExistsP());
env->defineVariable(new Variable("char-ready?"), new CharReadyP());
env->defineVariable(new Variable("set-current-output-port!"), new SetCurrentOutputPort());
env->defineVariable(new Variable("set-current-input-port!"), new SetCurrentInputPort());
env->defineVariable(new Variable("input-port?"), new InputPortP());
env->defineVariable(new Variable("output-port?"), new OutputPortP());
env->defineVariable(new Variable("eof-object?"), new EOFObjectP());
env->defineVariable(new Variable("close-input-port"), new CloseInputPort());
env->defineVariable(new Variable("close-output-port"), new CloseOutputPort());
env->defineVariable(new Variable("open-output-port"), new OpenOutputPort());
env->defineVariable(new Variable("open-input-port"), new OpenInputPort());
env->defineVariable(new Variable("current-output-port"), new CurrentOutputPort());
env->defineVariable(new Variable("current-input-port"), new CurrentInputPort());
env->defineVariable(new Variable("write-char"), new WriteChar());
env->defineVariable(new Variable("read"), new Read());
env->defineVariable(new Variable("read-char"), new ReadChar());
env->defineVariable(new Variable("peek-char"), new PeekChar());
env->defineVariable(new Variable("write"), new Write());
env->defineVariable(new Variable("newline"), new NewLine());
env->defineVariable(new Variable("display"), new Display());
env->defineVariable(new Variable("load"), new Load());
env->defineVariable(new Variable("number?"), new NumberP());
env->defineVariable(new Variable("+"), new Plus());
env->defineVariable(new Variable("-"), new Minus());
env->defineVariable(new Variable("number->string"), new NumberToString());
env->defineVariable(new Variable("="), new NumberEqual());
env->defineVariable(new Variable(">"), new NumberGt());
env->defineVariable(new Variable("<"), new NumberLt());
env->defineVariable(new Variable(">="), new NumberGe());
env->defineVariable(new Variable("<="), new NumberLe());
env->defineVariable(new Variable("*"), new Multiply());
env->defineVariable(new Variable("/"), new Divide());
env->defineVariable(new Variable("pair?"), new PairP());
env->defineVariable(new Variable("cons"), new Cons());
env->defineVariable(new Variable("car"), new Car());
env->defineVariable(new Variable("cdr"), new Cdr());
env->defineVariable(new Variable("set-car!"), new SetCar());
env->defineVariable(new Variable("set-cdr!"), new SetCdr());
env->defineVariable(new Variable("string-copy"), new StringCopy());
env->defineVariable(new Variable("string?"), new StringP());
env->defineVariable(new Variable("make-string"), new MakeString());
env->defineVariable(new Variable("string-length"), new StringLength());
env->defineVariable(new Variable("string-ref"), new StringRef());
env->defineVariable(new Variable("string-set!"), new StringSet());
env->defineVariable(new Variable("string=?"), new StringEqualP());
env->defineVariable(new Variable("string->number"), new StringToNumber());
env->defineVariable(new Variable("string-split"), new StringSplit());
env->defineVariable(new Variable("string->symbol"), new StringToSymbol());
env->defineVariable(new Variable("symbol?"), new SymbolP());
env->defineVariable(new Variable("symbol->string"), new SymbolToString());
env->defineVariable(new Variable("vector?"), new VectorP());
env->defineVariable(new Variable("make-vector"), new MakeVector());
env->defineVariable(new Variable("vector"), new CreateVector());
env->defineVariable(new Variable("vector-length"), new VectorLength());
env->defineVariable(new Variable("vector-ref"), new VectorRef());
env->defineVariable(new Variable("vector-set!"), new VectorSet());
env->defineVariable(new Variable("dynamic-wind"), new DynamicWindProc());
env->defineVariable(new Variable("call-with-values"), new CallWithValues());
env->defineVariable(new Variable("call-with-current-continuation"), new CallWithCurrentContinuation());
env->defineVariable(new Variable("not-supported"), new NotSupported());
env->defineVariable(new Variable("procedure?"), new ProcedureP());
env->defineVariable(new Variable("boolean?"), new BooleanP());
env->defineVariable(new Variable("exit"), new Exit());
env->defineVariable(new Variable("apply"), new Apply());
env->defineVariable(new Variable("eval"), new Eval());
env->defineVariable(new Variable("null-environment"), new NullEnvironment());
env->defineVariable(new Variable("scheme-report-environment"), new SchemeReportEnvironment());
env->defineVariable(new Variable("interaction-environment"), new InteractionEnvironment());
env->defineVariable(new Variable("call-process"), new CallProcess());
env->defineVariable(new Variable("start-process"), new StartProcess());
env->defineVariable(new Variable("call-process-out-string"), new CallProcessOutString());
env->defineVariable(new Variable("mona-gui-get-window-title"), new MonaGuiGetWindowTitle());
env->defineVariable(new Variable("mona-gui-enum-windows"), new MonaGuiEnumWindows());
env->defineVariable(new Variable("mona-halt"), new MonaHalt());
env->defineVariable(new Variable("mona-reboot"), new MonaReboot());
env->defineVariable(new Variable("mona-kill"), new MonaKill());
env->defineVariable(new Variable("mona-sleep"), new MonaSleep());
env->defineVariable(new Variable("mona-ps"), new MonaPs());
